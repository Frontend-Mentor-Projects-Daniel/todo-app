{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// ------------------------------------------------------------------------------\n//                                 DOM NODES\n//-------------------------------------------------------------------------------\nconst todos = document.querySelectorAll(\n  '.todo-list-item'\n) as NodeListOf<HTMLLIElement>;\nconst form = document.querySelector('.create-bar-form') as HTMLFormElement;\nconst input = document.querySelector('.create-bar') as HTMLInputElement;\nconst ul = document.querySelector('.list') as HTMLUListElement;\nconst template = document.querySelector(\n  '#example-list-item'\n) as HTMLTemplateElement;\nconst themeToggler = document.querySelector(\n  '.theme-toggler'\n) as HTMLButtonElement;\nconst body = document.body as HTMLBodyElement;\n\n// ------------------------------------------------------------------------------\n//                                 TYPES\n//-------------------------------------------------------------------------------\ntype Todo = {\n  id: string;\n  value: string;\n  completed: boolean;\n};\n\ntype validButton = 'delete-btn' | 'complete-btn' | 'not-a-button';\n\ntype allowedElements = 'p' | 'del';\n\ntype CurrentTheme = {\n  theme: string;\n  image: string;\n};\n\n// ------------------------------------------------------------------------------\n//                                 MODEL\n//-------------------------------------------------------------------------------\ntype Model = {\n  AllTodos: Todo[];\n};\n\n// ------------------------------------------------------------------------------\n//                               GLOBAL STATE\n//-------------------------------------------------------------------------------\nconst init: Model = {\n  AllTodos: [],\n};\n\n// ------------------------------------------------------------------------------\n//                             UPDATE FUNCTION\n//-------------------------------------------------------------------------------\ntype Msg =\n  | 'AddTodo'\n  | 'RemoveTodo'\n  | 'UpdateTodo'\n  | 'CompleteTodo'\n  | 'RearrangeOrder';\n\n/**\n * For updating the global state, it should only update the global state and it should be the only thing which can update it\n * @param msg A message that will indicate what should be done to the global state\n * @param model The global state\n * @param value The Todo in which something should be done to\n * @param extra Anything else that may need to be added, usually for bonus functionality\n */\nfunction update(msg: Msg, model: Model, value: Todo): void {\n  switch (msg) {\n    case 'AddTodo':\n      model.AllTodos.push(value);\n      break;\n\n    case 'RemoveTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos.splice(index, 1);\n        }\n      });\n      break;\n\n    case 'UpdateTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].value = value.value;\n        }\n      });\n      break;\n\n    case 'CompleteTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].completed = !value.completed;\n        }\n      });\n      break;\n\n    case 'RearrangeOrder':\n      const allListItems = document.querySelectorAll(\n        '.list-item'\n      ) as NodeListOf<HTMLLIElement>;\n\n      model.AllTodos = [];\n\n      allListItems.forEach((listItem) => {\n        const isCompleted = convertStringToBool(\n          listItem.dataset.completed as string\n        );\n        const newTodo: Todo = {\n          id: listItem.dataset.id as string,\n          value: listItem.children[1].textContent as string,\n          completed: isCompleted,\n        };\n\n        model.AllTodos.push(newTodo);\n      });\n\n      break;\n  }\n}\n\n// ------------------------------------------------------------------------------\n//                                   SCRIPTS\n//-------------------------------------------------------------------------------\n\n// GET SAVED DATA FROM LOCAL STORAGE AND DISPLAY THEM\n((model: Model) => {\n  const getStoredTodos: string = getItemsFromLocalStorage('todos');\n  const parseStoredTodos: Todo[] = parseTodos(getStoredTodos);\n\n  // if there're no previous todo's, create example todo else update the state to contain all the stored todos\n  if (parseStoredTodos.length === 0) {\n    const newTodo = renderListItemNode(template);\n    update('AddTodo', model, newTodo);\n  } else {\n    for (const todo of parseStoredTodos) {\n      update('AddTodo', model, todo);\n    }\n  }\n\n  renderTodos(model.AllTodos);\n\n  // display last used theme\n  const lastActiveTheme = JSON.parse(getItemsFromLocalStorage('theme'));\n  // getItemsFromLocalStorage returns an empty array if the key isn't found\n  if (lastActiveTheme.length !== 0) {\n    toggleTheme(lastActiveTheme);\n  }\n\n  // update status bar to display the number of todos\n  renderNumberOfTodos(model);\n})(init);\n\n// CREATE NEW TODOS\n((model: Model) => {\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const getUserInput = input.value.trim();\n    const isUserInputEmpty = CheckIfEmptyString(getUserInput);\n    const createNewTodo = createTodoObject(getUserInput);\n\n    if (!isUserInputEmpty) {\n      update('AddTodo', model, createNewTodo);\n      saveTodosToLocalStorage(model.AllTodos);\n    }\n\n    renderTodos(model.AllTodos);\n\n    // when a todo is added, make sure that the status bar is updated\n    renderNumberOfTodos(model);\n  });\n})(init);\n\n// DELETE TODOS\n((model: Model) => {\n  ul.addEventListener('click', (e) => {\n    const deleteIconImage = e.target as HTMLImageElement;\n    const button = deleteIconImage.parentElement as HTMLButtonElement;\n\n    const listItem = button.parentElement as HTMLLIElement;\n\n    const todoId = listItem.dataset.id as string;\n    const isDeleteOrUpdateBtn = checkTypeOfButton(button);\n\n    if (isDeleteOrUpdateBtn === 'delete-btn') {\n      const todoThatShouldBeDeleted = findTodo(todoId, model);\n      deleteTodo(todoThatShouldBeDeleted.id, model, listItem);\n      update('RemoveTodo', model, todoThatShouldBeDeleted);\n      saveTodosToLocalStorage(model.AllTodos);\n\n      // when a todo is deleted, make sure that the status bar is updated\n      renderNumberOfTodos(model);\n    }\n  });\n})(init);\n\n// UPDATE TODOS\n((model: Model) => {\n  ul.addEventListener('focusout', (e) => {\n    const target = e.target;\n\n    if (target instanceof HTMLParagraphElement) {\n      const text = target.textContent !== null ? target.textContent : '';\n      const listItem = target.parentElement as HTMLLIElement;\n      const listItemID = listItem.dataset.id as string;\n      // strip out white spaces so that users can't update a todo to an empty line\n      const textPattern = text.replace(/ /g, '').trim();\n\n      // If white space or new line characters are the only things submitted, the todo will be turned back to the previous one\n      if (listItemID !== undefined && textPattern.length !== 0) {\n        const updatedTodo: Todo = {\n          id: listItemID,\n          value: text,\n          completed: false,\n        };\n        update('UpdateTodo', model, updatedTodo);\n        saveTodosToLocalStorage(model.AllTodos);\n      } else {\n        const previousTodo = findTodo(listItemID, model);\n        const previousText = previousTodo.value;\n        target.textContent = previousText;\n      }\n    }\n  });\n})(init);\n\n// COMPLETE TODO\n((model: Model) => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver((mutationList) => {\n    mutateCompletedTodos(mutationList, model);\n  });\n\n  // Start observing the target node for configured mutations\n  observer.observe(ul, config);\n\n  // add a mutation so that the mutationObserver code will automatically kick in\n  const newLi = document.createElement('li') as HTMLLIElement;\n  newLi.dataset.id = '000';\n  const shouldDelete = newLi;\n  ul.append(newLi);\n  if (shouldDelete.dataset.id === '000') {\n    shouldDelete.remove();\n  }\n})(init);\n\n// MOVE MAIN TAG WHEN THERE'RE NO TODOS\n((model: Model) => {\n  const config = { childList: true };\n\n  const observer = new MutationObserver((mutationList) => {\n    mutateStatusBar(mutationList, model);\n  });\n\n  observer.observe(ul, config);\n})(init);\n\n// TOGGLE THEME\n((model: Model) => {\n  themeToggler.addEventListener('click', (e) => {\n    toggleTheme();\n  });\n})(init);\n\n// FILTER TASKS\n((model: Model) => {\n  const tabs = document.querySelectorAll('.tabs') as NodeListOf<HTMLDivElement>;\n  tabs.forEach((tab) => {\n    tab.addEventListener('click', (e) => {\n      const button = e.target as HTMLButtonElement;\n\n      if (button.classList.contains('all')) {\n        renderTodos(model.AllTodos);\n        toggleAriaSelected(button);\n      }\n\n      if (button.classList.contains('active')) {\n        const completedTodos = model.AllTodos.filter((todo) => !todo.completed);\n        renderTodos(completedTodos);\n        toggleAriaSelected(button);\n      }\n\n      if (button.classList.contains('completed')) {\n        const completedTodos = model.AllTodos.filter((todo) => todo.completed);\n        renderTodos(completedTodos);\n        toggleAriaSelected(button);\n      }\n    });\n  });\n})(init);\n\n// DISPLAY NUMBER OF UN-COMPLETED TODOS\n((model: Model) => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true, subtree: true };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver((mutationList) => {\n    mutateRemainingTodosDisplay(mutationList, model);\n  });\n\n  // Start observing the target node for configured mutations\n  observer.observe(ul, config);\n})(init);\n\n// CLEAR ALL COMPLETED TASKS\n((model: Model) => {\n  const clearButtons = document.querySelectorAll(\n    '.clear-btn'\n  ) as NodeListOf<HTMLButtonElement>;\n\n  clearButtons.forEach((button) => {\n    button.addEventListener('click', (e) => {\n      const completedListItems: HTMLLIElement[] = getCompletedListItems();\n      let counter = 0;\n\n      const completedTodos = model.AllTodos.filter((todo) => todo.completed);\n\n      completedTodos.forEach((todo) => {\n        update('RemoveTodo', model, todo);\n        saveTodosToLocalStorage(model.AllTodos);\n        deleteTodo(todo.id, model, completedListItems[counter]);\n        counter++;\n      });\n    });\n  });\n})(init);\n\n// DRAG AND DROP TASKS\n((model: Model) => {\n  ul.addEventListener('dragstart', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.getAttribute('draggable') === 'true') {\n      target.classList.add('dragging');\n    }\n  });\n\n  ul.addEventListener('dragend', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.getAttribute('draggable') === 'true') {\n      target.classList.remove('dragging');\n\n      turnHtmlToTodoArray(target, model);\n    }\n  });\n\n  ul.addEventListener('dragover', (e) => {\n    // dragging and appending a child to a container is disabled by default, this is to prevent that default\n    e.preventDefault();\n    const currentlyDraggedItem = document.querySelector(\n      '.dragging'\n    ) as HTMLLIElement;\n    // the element positioned right after the currently being dragged element\n    const afterElement = getDragAfterElement(ul, e.clientY);\n\n    // TODO: Bugs arise sometimes when trying to move elements to the last position\n    //todo Such bugs include, the complete button not being able to be clicked and playing around with the tabs and moving elements around will cause other elements to get deleted\n    if (afterElement == null) {\n      currentlyDraggedItem.setAttribute('contenteditable', 'false');\n      ul.appendChild(currentlyDraggedItem);\n    } else {\n      currentlyDraggedItem.setAttribute('contenteditable', 'false');\n      ul.insertBefore(currentlyDraggedItem, afterElement);\n    }\n  });\n})(init);\n\n// ------------------------------------------------------------------------------\n//                              VIEW FUNCTIONS\n//-------------------------------------------------------------------------------\n\n/**\n * Displays all the todos from the global state unto the page\n * @param todos - The global state\n */\nfunction renderTodos(todos: Todo[]) {\n  ul.innerHTML = '';\n\n  let tempStorage: string[] = [];\n  for (const todo of todos) {\n    const determineElement = todo.completed ? 'del' : 'p';\n\n    tempStorage.push(\n      createListItem(\n        todo.id,\n        todo.value.trim(),\n        todo.completed,\n        determineElement\n      )\n    );\n    input.value = '';\n  }\n  ul.innerHTML = tempStorage.join('');\n}\n\n/**\n * Mutates a todo so that its completed data attribute is toggled\n * @param listItem - A list item currently appended to the DOM\n * @param value - What the completed data attribute should be set to\n */\nfunction toggleCompleteAttribute(listItem: HTMLLIElement, value: boolean) {\n  const isCompleted = value;\n\n  listItem.dataset.completed = isCompleted.toString();\n}\n\n/**\n * Toggles the active attribute on a list item\n * @param listItem An un-completed list item\n */\nfunction toggleActiveAttribute(listItem: HTMLLIElement) {\n  if (listItem.dataset.currentlyActive === 'true') {\n    listItem.dataset.currentlyActive = 'false';\n  } else {\n    listItem.dataset.currentlyActive = 'true';\n  }\n}\n\n/**\n * Removes a Todo <li> from the DOM\n * @param id - A unique id belonging to an object of type Todo\n * @param model - The global state\n * @param listElement - A list element to be removed\n * @returns {Todo} The deleted Todo object\n */\nfunction deleteTodo(\n  id: string,\n  model: Model,\n  listElement: HTMLLIElement\n): Todo {\n  const todo = findTodo(id, model);\n  listElement.remove();\n\n  return todo;\n}\n\n/**\n * Updates the global state, toggles the completed data attribute on a list item and replaces the p element with a del element if needed\n * @param e - A click event\n * @param model - The global state\n * @param el -\n */\nfunction handleCompletedClick(e: Event, model: Model, el = {}) {\n  const completeBtn = e.currentTarget as HTMLButtonElement;\n\n  const listItem = completeBtn.parentElement as HTMLLIElement;\n  const id = listItem.dataset.id;\n\n  if (id !== undefined) {\n    const currentTodo = findTodo(id, model);\n    currentTodo.completed = !currentTodo.completed;\n\n    update('CompleteTodo', model, currentTodo);\n\n    toggleCompleteAttribute(listItem, currentTodo.completed);\n  }\n}\n\n/**\n * Changes the number of todos in the display bar(s)\n * @param model The current state which should know which todos are currently completed\n */\nfunction renderNumberOfTodos(model: Model) {\n  const todosLeft = document.querySelectorAll(\n    '.items-left p'\n  ) as NodeListOf<HTMLParagraphElement>;\n\n  const unCompletedTodos = model.AllTodos.filter((todo) => !todo.completed);\n\n  todosLeft.forEach((todo) => {\n    if (unCompletedTodos.length === 1) {\n      todo.textContent = `${unCompletedTodos.length} item left`;\n    } else {\n      todo.textContent = `${unCompletedTodos.length} items left`;\n    }\n  });\n}\n\nfunction toggleTheme(theme?: CurrentTheme) {\n  const imageIcon = themeToggler.firstElementChild as HTMLImageElement;\n  // if a current theme exists, use that\n  if (theme != null) {\n    body.id = theme.theme;\n    imageIcon.setAttribute('src', theme.image);\n    return;\n  }\n\n  let currentTheme: CurrentTheme = {\n    theme: '',\n    image: '',\n  };\n\n  if (body.id === 'light') {\n    body.id = 'dark';\n    imageIcon.setAttribute('src', '/src/assets/images/icon-sun.svg');\n    const imageSrc = imageIcon.getAttribute('src') as string;\n    currentTheme = { theme: body.id, image: imageSrc };\n    saveThemeToLocalStorage(currentTheme);\n  } else {\n    body.id = 'light';\n    imageIcon.setAttribute('src', '/src/assets/images/icon-moon.svg');\n    const imageSrc = imageIcon.getAttribute('src') as string;\n    currentTheme = { theme: body.id, image: imageSrc };\n    saveThemeToLocalStorage(currentTheme);\n  }\n}\n\n/**\n * Toggles the aria-selected attribute of a tab to either \"true\" or \"\" while resetting the value of the other tabs\n * @param tab One of the tabs, all, active or completed\n */\nfunction toggleAriaSelected(tab: HTMLButtonElement) {\n  // reset the aria-selected attribute on all the tabs\n  const allTabs = document.querySelectorAll(\n    '.tabs button'\n  ) as NodeListOf<HTMLButtonElement>;\n  allTabs.forEach((tab) => {\n    tab.setAttribute('aria-selected', '');\n  });\n\n  const isSelected = tab.getAttribute('aria-selected');\n  if (isSelected === null || isSelected === '') {\n    tab.setAttribute('aria-selected', 'true');\n  }\n}\n\n/**\n * Changes the state to match the new order of elements\n * @param target\n * @param model\n */\nfunction turnHtmlToTodoArray(target, model) {\n  const strippedTodoId = target.dataset.id as string;\n  const todo: Todo = findTodo(strippedTodoId, model);\n  const allListItems = document.querySelectorAll(\n    '.list-item'\n  ) as NodeListOf<HTMLLIElement>;\n\n  for (const [index, value] of allListItems.entries()) {\n    if (value.dataset.id === strippedTodoId) {\n      update('RearrangeOrder', model, todo);\n    }\n  }\n\n  saveTodosToLocalStorage(model.AllTodos);\n}\n\n// ------------------------------------------------------------------------------\n//                                   DATABASE\n//-------------------------------------------------------------------------------\n\n/**\n * Saves users todos to local storage\n * @param todos - The global state that should be saved to local storage\n */\nfunction saveTodosToLocalStorage(todos: Todo[]) {\n  const todoToJson = JSON.stringify(todos);\n  localStorage.setItem('todos', todoToJson);\n}\n\n/**\n * Saves the value of the body's id property and the src attribute of the image icon to local storage\n * @param theme The current theme, light/dark && sun/moon-icon\n */\nfunction saveThemeToLocalStorage(theme: CurrentTheme) {\n  localStorage.setItem('theme', JSON.stringify(theme));\n}\n\n/**\n * Retrieves a JSON string from localStorage\n * @param itemName - The key in the key:value pair of localStorage\n * @returns {string} Either a string of the users todos or an empty array\n */\nfunction getItemsFromLocalStorage(itemName: string): string {\n  const storage = localStorage.getItem(itemName);\n  return storage !== null ? storage : '[]';\n}\n\n/**\n * Parses the users todo's\n * @param item - Parses a string\n * @returns {Todo[]} An array of objects of type Todo\n */\nfunction parseTodos(item: string): Todo[] {\n  return JSON.parse(item);\n}\n\n// ------------------------------------------------------------------------------\n//                              HELPER FUNCTIONS\n//-------------------------------------------------------------------------------\n/**\n * Creates a list item\n * @param id - The unique ID of the list item todo\n * @param text - The actual todo itself\n * @param el - Represents an Html element, ins and del are semantically correct but a p tag can be used as well\n * @param completed - Reflects whether the complete button has been clicked or not\n * @returns {string} The inner HTML of the <li> including the li itself\n */\nfunction createListItem(\n  id: string,\n  text: string,\n  completed: boolean = false,\n  el: allowedElements = 'p'\n): string {\n  const listItem = `\n        <li class=\"list-item\" data-id=${id} data-completed=\"${completed}\" draggable=\"true\">\n          <button class=\"complete-btn\">\n            <img src=\"/src/assets/images/icon-check.svg\" aria-hidden=\"true\" alt=\"\" />\n          </button>\n          <${el} class=\"list-item-text\" contenteditable=\"true\">${text}</${el}>\n          <button class=\"delete-btn todo-delete-icon\">\n            <img class=\"d\" src=\"/src/assets/images/icon-cross.svg\" alt=\"\" />\n          </button>\n        </li>\n    `;\n\n  return listItem;\n}\n\n/**\n * Checks if a string is empty. Will trim the the middle of the string\n * @param str - A string that will be checked\n * @returns {boolean} True if string is empty, false otherwise\n */\nfunction CheckIfEmptyString(str: string): boolean {\n  return str.trim() === '';\n}\n\n/**\n * Generates a unique id\n * @returns {string} A unique ID\n */\nfunction generateId(): string {\n  return Math.random().toString(36).slice(2);\n}\n\n/**\n * Creates an object of type Todo\n * @param value - A string which should be the actual todo itself\n * @returns {Todo} A todo object\n */\nfunction createTodoObject(value: string): Todo {\n  return {\n    id: generateId(),\n    value: value,\n    completed: false,\n  };\n}\n\n/**\n * Checks for the type of button being passed in\n * @param element - The button that was clicked on\n * @returns {validButton} A message stating the type of button that was clicked on\n * @throws {new Error} A string error built with the Error constructor\n * @example checkTypeOfButton(deleteBtn) -> 'delete-btn'\n */\nfunction checkTypeOfButton(element: HTMLButtonElement): validButton {\n  if (element.classList.contains('todo-delete-icon')) {\n    return 'delete-btn';\n  } else if (element.classList.contains('complete-btn')) {\n    return 'complete-btn';\n  } else {\n    return 'not-a-button';\n  }\n}\n\n/**\n * Finds a specific Todo based on an ID\n * @param id - A unique ID belonging to an object of type Todo\n * @param model - The global state\n * @returns {Todo} The Todo which matches the id passed in\n */\nfunction findTodo(id: string, model: Model): Todo {\n  const matchingTodo = model.AllTodos.filter((todo) => todo.id === id);\n\n  return matchingTodo[0];\n}\n\n/**\n * Creates a newTodo out of the example todo\n * @param template - The template to clone and turn into a newTodo object\n * @returns The example Todo\n */\nfunction renderListItemNode(template: HTMLTemplateElement): Todo {\n  const docFragment: DocumentFragment = template.content;\n  const listItemClone = docFragment.firstElementChild?.cloneNode(\n    true\n  ) as HTMLLIElement;\n\n  const id = listItemClone.dataset.id as string;\n  const pEl = listItemClone.childNodes[3];\n  const text = pEl.textContent?.trim() as string;\n\n  const newTodo: Todo = {\n    id: id,\n    value: text,\n    completed: false,\n  };\n\n  return newTodo;\n}\n\n/**\n * Creates a <p> element\n * @param text - The text content of the element\n * @returns A paragraph element which will be the todo itself. It can be edited\n */\nfunction createParagraphElement(text: string): HTMLParagraphElement {\n  const p = document.createElement('p');\n  p.textContent = text;\n  p.className = 'list-item-text';\n  p.setAttribute('contenteditable', 'true');\n\n  return p;\n}\n\n/**\n * Creates a <del> element\n * @param text - The text content of the element\n * @returns A del element which will be the todo itself. It cannot be edited\n */\nfunction createDelElement(text: string): HTMLModElement {\n  const del = document.createElement('del');\n  del.textContent = text;\n  del.className = 'list-item-text';\n\n  return del;\n}\n\n/**\n * Selects all of the list items todos from the DOM, turns them into an array and returns the completed ones\n * @returns An array of List Item todos\n */\nfunction getCompletedListItems() {\n  const listItems = document.querySelectorAll(\n    '.list-item'\n  ) as NodeListOf<HTMLLIElement>;\n  const listItemsArray: HTMLLIElement[] = [...listItems];\n  const completedListItems = listItemsArray.filter(\n    (li) => li.dataset.completed === 'true'\n  );\n\n  return completedListItems;\n}\n\n/**\n * Returns a boolean depending on the string. Used mainly for converting the <li>.dataset.completed from a string to a bool since type Todo requires a boolean\n * @param str A string to convert to a boolean. Will return true for \"true\" else false for anything else\n * @returns true or false\n */\nfunction convertStringToBool(str: string): boolean {\n  if (str === 'true') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Returns the element that comes after the current position of a dragged element\n */\n//TODO: try adding event listeners when === undefined\nfunction getDragAfterElement(container, y: number) {\n  const draggableElements = [\n    ...container.querySelectorAll('[draggable=\"true\"]:not(.dragging)'),\n  ];\n\n  return draggableElements.reduce(\n    (closest, child) => {\n      const box = child.getBoundingClientRect();\n      const offset = y - box.top - box.height / 2;\n\n      if (offset < 0 && offset > closest.offset) {\n        return { offset: offset, element: child };\n      } else {\n        return closest;\n      }\n    },\n    { offset: Number.NEGATIVE_INFINITY }\n  ).element;\n}\n\n// ------------------------------------------------------------------------------\n//                             MUTATION OBSERVERS\n//-------------------------------------------------------------------------------\n/**\n *  Mutation that should occur to a todo list item when the complete button is clicked\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateCompletedTodos(mutationList: MutationRecord[], model: Model) {\n  // check the type of mutation\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      // check to see if any mutation has occurred\n      if (mutation.addedNodes.length !== 0) {\n        const allCompleteButtons = document.querySelectorAll('.complete-btn');\n\n        allCompleteButtons.forEach((button) => {\n          // remove any previous event listeners before adding anymore in order to avoid any strange behavior\n          button.removeEventListener('click', () => {});\n\n          button.addEventListener('click', () => {\n            // get the listItem, its first child which will either by a p tag or a del tag and its text content\n            const listItem = button.parentElement as HTMLLIElement;\n            const pOrDel = listItem.children[1];\n            const todoText = pOrDel.textContent as string;\n\n            // create a new element that will be inserted depending on whether the todo is completed or not\n            const del = createDelElement(todoText);\n            const p = createParagraphElement(todoText);\n\n            if (pOrDel instanceof HTMLParagraphElement) {\n              listItem.replaceChild(del, pOrDel);\n            } else {\n              listItem.replaceChild(p, pOrDel);\n            }\n\n            // update the completed status of the todo\n            if (listItem.dataset.id != null) {\n              const currentTodo = findTodo(listItem.dataset.id, model);\n              const opposite = !currentTodo.completed;\n              listItem.dataset.completed = String(opposite);\n\n              update('CompleteTodo', model, currentTodo);\n              saveTodosToLocalStorage(model.AllTodos);\n            }\n          });\n        });\n      }\n    }\n  }\n}\n\n/**\n *  Mutation that should occur the display on the status bar that shows the remaining un-completed todos\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateRemainingTodosDisplay(\n  mutationList: MutationRecord[],\n  model: Model\n) {\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      if (\n        mutation.addedNodes[0] instanceof HTMLModElement ||\n        mutation.addedNodes[0] instanceof HTMLParagraphElement\n      ) {\n        renderNumberOfTodos(model);\n      }\n    }\n  }\n}\n\n/**\n *  Mutation that should occur to the status bar when they're no todos left\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateStatusBar(mutationList: MutationRecord[], model: Model) {\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      const main = document.querySelector('main') as HTMLElement;\n\n      if (model.AllTodos.length === 0 && main !== null) {\n        main.style.transform = 'translateY(0)';\n      } else {\n        main.style.transform = 'translateY(-24px)';\n      }\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdHMvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7Ozs7OztBQUNBLElBQU0sUUFBUSxTQUFTLGdCQUFULENBQ1osaUJBRFksQ0FBZDtBQUdBLElBQU0sT0FBTyxTQUFTLGFBQVQsQ0FBdUIsa0JBQXZCLENBQWI7QUFDQSxJQUFNLFFBQVEsU0FBUyxhQUFULENBQXVCLGFBQXZCLENBQWQ7QUFDQSxJQUFNLEtBQUssU0FBUyxhQUFULENBQXVCLE9BQXZCLENBQVg7QUFDQSxJQUFNLFdBQVcsU0FBUyxhQUFULENBQ2Ysb0JBRGUsQ0FBakI7QUFHQSxJQUFNLGVBQWUsU0FBUyxhQUFULENBQ25CLGdCQURtQixDQUFyQjtBQUdBLElBQU0sT0FBTyxTQUFTLElBQXRCO0FBMkJBO0FBQ0E7QUFDQTtBQUNBLElBQU0sT0FBYztBQUNsQixjQUFVO0FBRFEsQ0FBcEI7QUFjQTs7Ozs7OztBQU9BLFNBQVMsTUFBVCxDQUFnQixHQUFoQixFQUEwQixLQUExQixFQUF3QyxLQUF4QyxFQUFtRDtBQUNqRCxZQUFRLEdBQVI7QUFDRSxhQUFLLFNBQUw7QUFDRSxrQkFBTSxRQUFOLENBQWUsSUFBZixDQUFvQixLQUFwQjtBQUNBO0FBRUYsYUFBSyxZQUFMO0FBQ0Usa0JBQU0sUUFBTixDQUFlLE9BQWYsQ0FBdUIsVUFBQyxJQUFELEVBQVM7QUFDOUIsb0JBQUksS0FBSyxFQUFMLEtBQVksTUFBTSxFQUF0QixFQUEwQjtBQUN4Qix3QkFBTSxRQUFRLE1BQU0sUUFBTixDQUFlLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBZDtBQUNBLDBCQUFNLFFBQU4sQ0FBZSxNQUFmLENBQXNCLEtBQXRCLEVBQTZCLENBQTdCO0FBQ0Q7QUFDRixhQUxEO0FBTUE7QUFFRixhQUFLLFlBQUw7QUFDRSxrQkFBTSxRQUFOLENBQWUsT0FBZixDQUF1QixVQUFDLElBQUQsRUFBUztB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MUIsUUFBMEI7O0FBQ25DLGdCQUFJLFNBQVMsSUFBVCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxvQkFDRSxTQUFTLFVBQVQsQ0FBb0IsQ0FBcEIsYUFBa0MsY0FBbEMsSUFDQSxTQUFTLFVBQVQsQ0FBb0IsQ0FBcEIsYUFBa0Msb0JBRnBDLEVBR0U7QUFDQSx3Q0FBb0IsS0FBcEI7QUFDRDtBQUNGO0FBQ0Y7QUFYVztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWWI7QUFFRDs7Ozs7QUFLQSxTQUFTLGVBQVQsQ0FBeUIsWUFBekIsRUFBeUQsS0FBekQsRUFBcUU7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDbkUsOEJBQXVCLFlBQXZCLG1JQUFxQztBQUFBLGdCQUExQixRQUEwQjs7QUFDbkMsZ0JBQUksU0FBUyxJQUFULEtBQWtCLFdBQXRCLEVBQW1DO0FBQ2pDLG9CQUFNLE9BQU8sU0FBUyxhQUFULENBQXVCLE1BQXZCLENBQWI7QUFFQSxvQkFBSSxNQUFNLFFBQU4sQ0FBZSxNQUFmLEtBQTBCLENBQTFCLElBQStCLFNBQVMsSUFBNUMsRUFBa0Q7QUFDaEQseUJBQUssS0FBTCxDQUFXLFNBQVgsR0FBdUIsZUFBdkI7QUFDRCxpQkFGRCxNQUVPO0FBQ0wseUJBQUssS0FBTCxDQUFXLFNBQVgsR0FBdUIsbUJBQXZCO0FBQ0Q7QUFDRjtBQUNGO0FBWGtFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFZcEUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NIE5PREVTXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNvbnN0IHRvZG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgJy50b2RvLWxpc3QtaXRlbSdcbikgYXMgTm9kZUxpc3RPZjxIVE1MTElFbGVtZW50PjtcbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlLWJhci1mb3JtJykgYXMgSFRNTEZvcm1FbGVtZW50O1xuY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlLWJhcicpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5jb25zdCB1bCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0JykgYXMgSFRNTFVMaXN0RWxlbWVudDtcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJyNleGFtcGxlLWxpc3QtaXRlbSdcbikgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcbmNvbnN0IHRoZW1lVG9nZ2xlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICcudGhlbWUtdG9nZ2xlcidcbikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5jb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keSBhcyBIVE1MQm9keUVsZW1lbnQ7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUWVBFU1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG50eXBlIFRvZG8gPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGNvbXBsZXRlZDogYm9vbGVhbjtcbn07XG5cbnR5cGUgdmFsaWRCdXR0b24gPSAnZGVsZXRlLWJ0bicgfCAnY29tcGxldGUtYnRuJyB8ICdub3QtYS1idXR0b24nO1xuXG50eXBlIGFsbG93ZWRFbGVtZW50cyA9ICdwJyB8ICdkZWwnO1xuXG50eXBlIEN1cnJlbnRUaGVtZSA9IHtcbiAgdGhlbWU6IHN0cmluZztcbiAgaW1hZ2U6IHN0cmluZztcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNT0RFTFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG50eXBlIE1vZGVsID0ge1xuICBBbGxUb2RvczogVG9kb1tdO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHTE9CQUwgU1RBVEVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY29uc3QgaW5pdDogTW9kZWwgPSB7XG4gIEFsbFRvZG9zOiBbXSxcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVQREFURSBGVU5DVElPTlxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG50eXBlIE1zZyA9XG4gIHwgJ0FkZFRvZG8nXG4gIHwgJ1JlbW92ZVRvZG8nXG4gIHwgJ1VwZGF0ZVRvZG8nXG4gIHwgJ0NvbXBsZXRlVG9kbydcbiAgfCAnUmVhcnJhbmdlT3JkZXInO1xuXG4vKipcbiAqIEZvciB1cGRhdGluZyB0aGUgZ2xvYmFsIHN0YXRlLCBpdCBzaG91bGQgb25seSB1cGRhdGUgdGhlIGdsb2JhbCBzdGF0ZSBhbmQgaXQgc2hvdWxkIGJlIHRoZSBvbmx5IHRoaW5nIHdoaWNoIGNhbiB1cGRhdGUgaXRcbiAqIEBwYXJhbSBtc2cgQSBtZXNzYWdlIHRoYXQgd2lsbCBpbmRpY2F0ZSB3aGF0IHNob3VsZCBiZSBkb25lIHRvIHRoZSBnbG9iYWwgc3RhdGVcbiAqIEBwYXJhbSBtb2RlbCBUaGUgZ2xvYmFsIHN0YXRlXG4gKiBAcGFyYW0gdmFsdWUgVGhlIFRvZG8gaW4gd2hpY2ggc29tZXRoaW5nIHNob3VsZCBiZSBkb25lIHRvXG4gKiBAcGFyYW0gZXh0cmEgQW55dGhpbmcgZWxzZSB0aGF0IG1heSBuZWVkIHRvIGJlIGFkZGVkLCB1c3VhbGx5IGZvciBib251cyBmdW5jdGlvbmFsaXR5XG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZShtc2c6IE1zZywgbW9kZWw6IE1vZGVsLCB2YWx1ZTogVG9kbyk6IHZvaWQge1xuICBzd2l0Y2ggKG1zZykge1xuICAgIGNhc2UgJ0FkZFRvZG8nOlxuICAgICAgbW9kZWwuQWxsVG9kb3MucHVzaCh2YWx1ZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1JlbW92ZVRvZG8nOlxuICAgICAgbW9kZWwuQWxsVG9kb3MuZm9yRWFjaCgodG9kbykgPT4ge1xuICAgICAgICBpZiAodG9kby5pZCA9PT0gdmFsdWUuaWQpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IG1vZGVsLkFsbFRvZG9zLmluZGV4T2YodG9kbyk7XG4gICAgICAgICAgbW9kZWwuQWxsVG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1VwZGF0ZVRvZG8nOlxuICAgICAgbW9kZWwuQWxsVG9kb3MuZm9yRWFjaCgodG9kbykgPT4ge1xuICAgICAgICBpZiAodG9kby5pZCA9PT0gdmFsdWUuaWQpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IG1vZGVsLkFsbFRvZG9zLmluZGV4T2YodG9kbyk7XG4gICAgICAgICAgbW9kZWwuQWxsVG9kb3NbaW5kZXhdLnZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdDb21wbGV0ZVRvZG8nOlxuICAgICAgbW9kZWwuQWxsVG9kb3MuZm9yRWFjaCgodG9kbykgPT4ge1xuICAgICAgICBpZiAodG9kby5pZCA9PT0gdmFsdWUuaWQpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IG1vZGVsLkFsbFRvZG9zLmluZGV4T2YodG9kbyk7XG4gICAgICAgICAgbW9kZWwuQWxsVG9kb3NbaW5kZXhdLmNvbXBsZXRlZCA9ICF2YWx1ZS5jb21wbGV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdSZWFycmFuZ2VPcmRlcic6XG4gICAgICBjb25zdCBhbGxMaXN0SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnLmxpc3QtaXRlbSdcbiAgICAgICkgYXMgTm9kZUxpc3RPZjxIVE1MTElFbGVtZW50PjtcblxuICAgICAgbW9kZWwuQWxsVG9kb3MgPSBbXTtcblxuICAgICAgYWxsTGlzdEl0ZW1zLmZvckVhY2goKGxpc3RJdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQ29tcGxldGVkID0gY29udmVydFN0cmluZ1RvQm9vbChcbiAgICAgICAgICBsaXN0SXRlbS5kYXRhc2V0LmNvbXBsZXRlZCBhcyBzdHJpbmdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3VG9kbzogVG9kbyA9IHtcbiAgICAgICAgICBpZDogbGlzdEl0ZW0uZGF0YXNldC5pZCBhcyBzdHJpbmcsXG4gICAgICAgICAgdmFsdWU6IGxpc3RJdGVtLmNoaWxkcmVuWzFdLnRleHRDb250ZW50IGFzIHN0cmluZyxcbiAgICAgICAgICBjb21wbGV0ZWQ6IGlzQ29tcGxldGVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGVsLkFsbFRvZG9zLnB1c2gobmV3VG9kbyk7XG4gICAgICB9KTtcblxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0NSSVBUU1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEdFVCBTQVZFRCBEQVRBIEZST00gTE9DQUwgU1RPUkFHRSBBTkQgRElTUExBWSBUSEVNXG4oKG1vZGVsOiBNb2RlbCkgPT4ge1xuICBjb25zdCBnZXRTdG9yZWRUb2Rvczogc3RyaW5nID0gZ2V0SXRlbXNGcm9tTG9jYWxTdG9yYWdlKCd0b2RvcycpO1xuICBjb25zdCBwYXJzZVN0b3JlZFRvZG9zOiBUb2RvW10gPSBwYXJzZVRvZG9zKGdldFN0b3JlZFRvZG9zKTtcblxuICAvLyBpZiB0aGVyZSdyZSBubyBwcmV2aW91cyB0b2RvJ3MsIGNyZWF0ZSBleGFtcGxlIHRvZG8gZWxzZSB1cGRhdGUgdGhlIHN0YXRlIHRvIGNvbnRhaW4gYWxsIHRoZSBzdG9yZWQgdG9kb3NcbiAgaWYgKHBhcnNlU3RvcmVkVG9kb3MubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgbmV3VG9kbyA9IHJlbmRlckxpc3RJdGVtTm9kZSh0ZW1wbGF0ZSk7XG4gICAgdXBkYXRlKCdBZGRUb2RvJywgbW9kZWwsIG5ld1RvZG8pO1xuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3QgdG9kbyBvZiBwYXJzZVN0b3JlZFRvZG9zKSB7XG4gICAgICB1cGRhdGUoJ0FkZFRvZG8nLCBtb2RlbCwgdG9kbyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyVG9kb3MobW9kZWwuQWxsVG9kb3MpO1xuXG4gIC8vIGRpc3BsYXkgbGFzdCB1c2VkIHRoZW1lXG4gIGNvbnN0IGxhc3RBY3RpdmVUaGVtZSA9IEpTT04ucGFyc2UoZ2V0SXRlbXNGcm9tTG9jYWxTdG9yYWdlKCd0aGVtZScpKTtcbiAgLy8gZ2V0SXRlbXNGcm9tTG9jYWxTdG9yYWdlIHJldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgdGhlIGtleSBpc24ndCBmb3VuZFxuICBpZiAobGFzdEFjdGl2ZVRoZW1lLmxlbmd0aCAhPT0gMCkge1xuICAgIHRvZ2dsZVRoZW1lKGxhc3RBY3RpdmVUaGVtZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdHVzIGJhciB0byBkaXNwbGF5IHRoZSBudW1iZXIgb2YgdG9kb3NcbiAgcmVuZGVyTnVtYmVyT2ZUb2Rvcyhtb2RlbCk7XG59KShpbml0KTtcblxuLy8gQ1JFQVRFIE5FVyBUT0RPU1xuKChtb2RlbDogTW9kZWwpID0+IHtcbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBnZXRVc2VySW5wdXQgPSBpbnB1dC52YWx1ZS50cmltKCk7XG4gICAgY29uc3QgaXNVc2VySW5wdXRFbXB0eSA9IENoZWNrSWZFbXB0eVN0cmluZyhnZXRVc2VySW5wdXQpO1xuICAgIGNvbnN0IGNyZWF0ZU5ld1RvZG8gPSBjcmVhdGVUb2RvT2JqZWN0KGdldFVzZXJJbnB1dCk7XG5cbiAgICBpZiAoIWlzVXNlcklucHV0RW1wdHkpIHtcbiAgICAgIHVwZGF0ZSgnQWRkVG9kbycsIG1vZGVsLCBjcmVhdGVOZXdUb2RvKTtcbiAgICAgIHNhdmVUb2Rvc1RvTG9jYWxTdG9yYWdlKG1vZGVsLkFsbFRvZG9zKTtcbiAgICB9XG5cbiAgICByZW5kZXJUb2Rvcyhtb2RlbC5BbGxUb2Rvcyk7XG5cbiAgICAvLyB3aGVuIGEgdG9kbyBpcyBhZGRlZCwgbWFrZSBzdXJlIHRoYXQgdGhlIHN0YXR1cyBiYXIgaXMgdXBkYXRlZFxuICAgIHJlbmRlck51bWJlck9mVG9kb3MobW9kZWwpO1xuICB9KTtcbn0pKGluaXQpO1xuXG4vLyBERUxFVEUgVE9ET1NcbigobW9kZWw6IE1vZGVsKSA9PiB7XG4gIHVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBjb25zdCBkZWxldGVJY29uSW1hZ2UgPSBlLnRhcmdldCBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRlbGV0ZUljb25JbWFnZS5wYXJlbnRFbGVtZW50IGFzIEhUTUxCdXR0b25FbGVtZW50O1xuXG4gICAgY29uc3QgbGlzdEl0ZW0gPSBidXR0b24ucGFyZW50RWxlbWVudCBhcyBIVE1MTElFbGVtZW50O1xuXG4gICAgY29uc3QgdG9kb0lkID0gbGlzdEl0ZW0uZGF0YXNldC5pZCBhcyBzdHJpbmc7XG4gICAgY29uc3QgaXNEZWxldGVPclVwZGF0ZUJ0biA9IGNoZWNrVHlwZU9mQnV0dG9uKGJ1dHRvbik7XG5cbiAgICBpZiAoaXNEZWxldGVPclVwZGF0ZUJ0biA9PT0gJ2RlbGV0ZS1idG4nKSB7XG4gICAgICBjb25zdCB0b2RvVGhhdFNob3VsZEJlRGVsZXRlZCA9IGZpbmRUb2RvKHRvZG9JZCwgbW9kZWwpO1xuICAgICAgZGVsZXRlVG9kbyh0b2RvVGhhdFNob3VsZEJlRGVsZXRlZC5pZCwgbW9kZWwsIGxpc3RJdGVtKTtcbiAgICAgIHVwZGF0ZSgnUmVtb3ZlVG9kbycsIG1vZGVsLCB0b2RvVGhhdFNob3VsZEJlRGVsZXRlZCk7XG4gICAgICBzYXZlVG9kb3NUb0xvY2FsU3RvcmFnZShtb2RlbC5BbGxUb2Rvcyk7XG5cbiAgICAgIC8vIHdoZW4gYSB0b2RvIGlzIGRlbGV0ZWQsIG1ha2Ugc3VyZSB0aGF0IHRoZSBzdGF0dXMgYmFyIGlzIHVwZGF0ZWRcbiAgICAgIHJlbmRlck51bWJlck9mVG9kb3MobW9kZWwpO1xuICAgIH1cbiAgfSk7XG59KShpbml0KTtcblxuLy8gVVBEQVRFIFRPRE9TXG4oKG1vZGVsOiBNb2RlbCkgPT4ge1xuICB1bC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIChlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFBhcmFncmFwaEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRleHQgPSB0YXJnZXQudGV4dENvbnRlbnQgIT09IG51bGwgPyB0YXJnZXQudGV4dENvbnRlbnQgOiAnJztcbiAgICAgIGNvbnN0IGxpc3RJdGVtID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQgYXMgSFRNTExJRWxlbWVudDtcbiAgICAgIGNvbnN0IGxpc3RJdGVtSUQgPSBsaXN0SXRlbS5kYXRhc2V0LmlkIGFzIHN0cmluZztcbiAgICAgIC8vIHN0cmlwIG91dCB3aGl0ZSBzcGFjZXMgc28gdGhhdCB1c2VycyBjYW4ndCB1cGRhdGUgYSB0b2RvIHRvIGFuIGVtcHR5IGxpbmVcbiAgICAgIGNvbnN0IHRleHRQYXR0ZXJuID0gdGV4dC5yZXBsYWNlKC8gL2csICcnKS50cmltKCk7XG5cbiAgICAgIC8vIElmIHdoaXRlIHNwYWNlIG9yIG5ldyBsaW5lIGNoYXJhY3RlcnMgYXJlIHRoZSBvbmx5IHRoaW5ncyBzdWJtaXR0ZWQsIHRoZSB0b2RvIHdpbGwgYmUgdHVybmVkIGJhY2sgdG8gdGhlIHByZXZpb3VzIG9uZVxuICAgICAgaWYgKGxpc3RJdGVtSUQgIT09IHVuZGVmaW5lZCAmJiB0ZXh0UGF0dGVybi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFRvZG86IFRvZG8gPSB7XG4gICAgICAgICAgaWQ6IGxpc3RJdGVtSUQsXG4gICAgICAgICAgdmFsdWU6IHRleHQsXG4gICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgdXBkYXRlKCdVcGRhdGVUb2RvJywgbW9kZWwsIHVwZGF0ZWRUb2RvKTtcbiAgICAgICAgc2F2ZVRvZG9zVG9Mb2NhbFN0b3JhZ2UobW9kZWwuQWxsVG9kb3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNUb2RvID0gZmluZFRvZG8obGlzdEl0ZW1JRCwgbW9kZWwpO1xuICAgICAgICBjb25zdCBwcmV2aW91c1RleHQgPSBwcmV2aW91c1RvZG8udmFsdWU7XG4gICAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IHByZXZpb3VzVGV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSkoaW5pdCk7XG5cbi8vIENPTVBMRVRFIFRPRE9cbigobW9kZWw6IE1vZGVsKSA9PiB7XG4gIC8vIE9wdGlvbnMgZm9yIHRoZSBvYnNlcnZlciAod2hpY2ggbXV0YXRpb25zIHRvIG9ic2VydmUpXG4gIGNvbnN0IGNvbmZpZyA9IHsgY2hpbGRMaXN0OiB0cnVlIH07XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGxpbmtlZCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25MaXN0KSA9PiB7XG4gICAgbXV0YXRlQ29tcGxldGVkVG9kb3MobXV0YXRpb25MaXN0LCBtb2RlbCk7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IG9ic2VydmluZyB0aGUgdGFyZ2V0IG5vZGUgZm9yIGNvbmZpZ3VyZWQgbXV0YXRpb25zXG4gIG9ic2VydmVyLm9ic2VydmUodWwsIGNvbmZpZyk7XG5cbiAgLy8gYWRkIGEgbXV0YXRpb24gc28gdGhhdCB0aGUgbXV0YXRpb25PYnNlcnZlciBjb2RlIHdpbGwgYXV0b21hdGljYWxseSBraWNrIGluXG4gIGNvbnN0IG5ld0xpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSBhcyBIVE1MTElFbGVtZW50O1xuICBuZXdMaS5kYXRhc2V0LmlkID0gJzAwMCc7XG4gIGNvbnN0IHNob3VsZERlbGV0ZSA9IG5ld0xpO1xuICB1bC5hcHBlbmQobmV3TGkpO1xuICBpZiAoc2hvdWxkRGVsZXRlLmRhdGFzZXQuaWQgPT09ICcwMDAnKSB7XG4gICAgc2hvdWxkRGVsZXRlLnJlbW92ZSgpO1xuICB9XG59KShpbml0KTtcblxuLy8gTU9WRSBNQUlOIFRBRyBXSEVOIFRIRVJFJ1JFIE5PIFRPRE9TXG4oKG1vZGVsOiBNb2RlbCkgPT4ge1xuICBjb25zdCBjb25maWcgPSB7IGNoaWxkTGlzdDogdHJ1ZSB9O1xuXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9uTGlzdCkgPT4ge1xuICAgIG11dGF0ZVN0YXR1c0JhcihtdXRhdGlvbkxpc3QsIG1vZGVsKTtcbiAgfSk7XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZSh1bCwgY29uZmlnKTtcbn0pKGluaXQpO1xuXG4vLyBUT0dHTEUgVEhFTUVcbigobW9kZWw6IE1vZGVsKSA9PiB7XG4gIHRoZW1lVG9nZ2xlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgdG9nZ2xlVGhlbWUoKTtcbiAgfSk7XG59KShpbml0KTtcblxuLy8gRklMVEVSIFRBU0tTXG4oKG1vZGVsOiBNb2RlbCkgPT4ge1xuICBjb25zdCB0YWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYnMnKSBhcyBOb2RlTGlzdE9mPEhUTUxEaXZFbGVtZW50PjtcbiAgdGFicy5mb3JFYWNoKCh0YWIpID0+IHtcbiAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgY29uc3QgYnV0dG9uID0gZS50YXJnZXQgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdhbGwnKSkge1xuICAgICAgICByZW5kZXJUb2Rvcyhtb2RlbC5BbGxUb2Rvcyk7XG4gICAgICAgIHRvZ2dsZUFyaWFTZWxlY3RlZChidXR0b24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgICAgY29uc3QgY29tcGxldGVkVG9kb3MgPSBtb2RlbC5BbGxUb2Rvcy5maWx0ZXIoKHRvZG8pID0+ICF0b2RvLmNvbXBsZXRlZCk7XG4gICAgICAgIHJlbmRlclRvZG9zKGNvbXBsZXRlZFRvZG9zKTtcbiAgICAgICAgdG9nZ2xlQXJpYVNlbGVjdGVkKGJ1dHRvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWQnKSkge1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRUb2RvcyA9IG1vZGVsLkFsbFRvZG9zLmZpbHRlcigodG9kbykgPT4gdG9kby5jb21wbGV0ZWQpO1xuICAgICAgICByZW5kZXJUb2Rvcyhjb21wbGV0ZWRUb2Rvcyk7XG4gICAgICAgIHRvZ2dsZUFyaWFTZWxlY3RlZChidXR0b24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKGluaXQpO1xuXG4vLyBESVNQTEFZIE5VTUJFUiBPRiBVTi1DT01QTEVURUQgVE9ET1NcbigobW9kZWw6IE1vZGVsKSA9PiB7XG4gIC8vIE9wdGlvbnMgZm9yIHRoZSBvYnNlcnZlciAod2hpY2ggbXV0YXRpb25zIHRvIG9ic2VydmUpXG4gIGNvbnN0IGNvbmZpZyA9IHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH07XG5cbiAgLy8gQ3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGxpbmtlZCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25MaXN0KSA9PiB7XG4gICAgbXV0YXRlUmVtYWluaW5nVG9kb3NEaXNwbGF5KG11dGF0aW9uTGlzdCwgbW9kZWwpO1xuICB9KTtcblxuICAvLyBTdGFydCBvYnNlcnZpbmcgdGhlIHRhcmdldCBub2RlIGZvciBjb25maWd1cmVkIG11dGF0aW9uc1xuICBvYnNlcnZlci5vYnNlcnZlKHVsLCBjb25maWcpO1xufSkoaW5pdCk7XG5cbi8vIENMRUFSIEFMTCBDT01QTEVURUQgVEFTS1NcbigobW9kZWw6IE1vZGVsKSA9PiB7XG4gIGNvbnN0IGNsZWFyQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJy5jbGVhci1idG4nXG4gICkgYXMgTm9kZUxpc3RPZjxIVE1MQnV0dG9uRWxlbWVudD47XG5cbiAgY2xlYXJCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBjb25zdCBjb21wbGV0ZWRMaXN0SXRlbXM6IEhUTUxMSUVsZW1lbnRbXSA9IGdldENvbXBsZXRlZExpc3RJdGVtcygpO1xuICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gICAgICBjb25zdCBjb21wbGV0ZWRUb2RvcyA9IG1vZGVsLkFsbFRvZG9zLmZpbHRlcigodG9kbykgPT4gdG9kby5jb21wbGV0ZWQpO1xuXG4gICAgICBjb21wbGV0ZWRUb2Rvcy5mb3JFYWNoKCh0b2RvKSA9PiB7XG4gICAgICAgIHVwZGF0ZSgnUmVtb3ZlVG9kbycsIG1vZGVsLCB0b2RvKTtcbiAgICAgICAgc2F2ZVRvZG9zVG9Mb2NhbFN0b3JhZ2UobW9kZWwuQWxsVG9kb3MpO1xuICAgICAgICBkZWxldGVUb2RvKHRvZG8uaWQsIG1vZGVsLCBjb21wbGV0ZWRMaXN0SXRlbXNbY291bnRlcl0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KShpbml0KTtcblxuLy8gRFJBRyBBTkQgRFJPUCBUQVNLU1xuKChtb2RlbDogTW9kZWwpID0+IHtcbiAgdWwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgKGUpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJykgPT09ICd0cnVlJykge1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgfVxuICB9KTtcblxuICB1bC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgKGUpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJykgPT09ICd0cnVlJykge1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG5cbiAgICAgIHR1cm5IdG1sVG9Ub2RvQXJyYXkodGFyZ2V0LCBtb2RlbCk7XG4gICAgfVxuICB9KTtcblxuICB1bC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIChlKSA9PiB7XG4gICAgLy8gZHJhZ2dpbmcgYW5kIGFwcGVuZGluZyBhIGNoaWxkIHRvIGEgY29udGFpbmVyIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQsIHRoaXMgaXMgdG8gcHJldmVudCB0aGF0IGRlZmF1bHRcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgY3VycmVudGx5RHJhZ2dlZEl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgJy5kcmFnZ2luZydcbiAgICApIGFzIEhUTUxMSUVsZW1lbnQ7XG4gICAgLy8gdGhlIGVsZW1lbnQgcG9zaXRpb25lZCByaWdodCBhZnRlciB0aGUgY3VycmVudGx5IGJlaW5nIGRyYWdnZWQgZWxlbWVudFxuICAgIGNvbnN0IGFmdGVyRWxlbWVudCA9IGdldERyYWdBZnRlckVsZW1lbnQodWwsIGUuY2xpZW50WSk7XG5cbiAgICAvLyBUT0RPOiBCdWdzIGFyaXNlIHNvbWV0aW1lcyB3aGVuIHRyeWluZyB0byBtb3ZlIGVsZW1lbnRzIHRvIHRoZSBsYXN0IHBvc2l0aW9uXG4gICAgLy90b2RvIFN1Y2ggYnVncyBpbmNsdWRlLCB0aGUgY29tcGxldGUgYnV0dG9uIG5vdCBiZWluZyBhYmxlIHRvIGJlIGNsaWNrZWQgYW5kIHBsYXlpbmcgYXJvdW5kIHdpdGggdGhlIHRhYnMgYW5kIG1vdmluZyBlbGVtZW50cyBhcm91bmQgd2lsbCBjYXVzZSBvdGhlciBlbGVtZW50cyB0byBnZXQgZGVsZXRlZFxuICAgIGlmIChhZnRlckVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgY3VycmVudGx5RHJhZ2dlZEl0ZW0uc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCAnZmFsc2UnKTtcbiAgICAgIHVsLmFwcGVuZENoaWxkKGN1cnJlbnRseURyYWdnZWRJdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudGx5RHJhZ2dlZEl0ZW0uc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCAnZmFsc2UnKTtcbiAgICAgIHVsLmluc2VydEJlZm9yZShjdXJyZW50bHlEcmFnZ2VkSXRlbSwgYWZ0ZXJFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufSkoaW5pdCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSUVXIEZVTkNUSU9OU1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogRGlzcGxheXMgYWxsIHRoZSB0b2RvcyBmcm9tIHRoZSBnbG9iYWwgc3RhdGUgdW50byB0aGUgcGFnZVxuICogQHBhcmFtIHRvZG9zIC0gVGhlIGdsb2JhbCBzdGF0ZVxuICovXG5mdW5jdGlvbiByZW5kZXJUb2Rvcyh0b2RvczogVG9kb1tdKSB7XG4gIHVsLmlubmVySFRNTCA9ICcnO1xuXG4gIGxldCB0ZW1wU3RvcmFnZTogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChjb25zdCB0b2RvIG9mIHRvZG9zKSB7XG4gICAgY29uc3QgZGV0ZXJtaW5lRWxlbWVudCA9IHRvZG8uY29tcGxldGVkID8gJ2RlbCcgOiAncCc7XG5cbiAgICB0ZW1wU3RvcmFnZS5wdXNoKFxuICAgICAgY3JlYXRlTGlzdEl0ZW0oXG4gICAgICAgIHRvZG8uaWQsXG4gICAgICAgIHRvZG8udmFsdWUudHJpbSgpLFxuICAgICAgICB0b2RvLmNvbXBsZXRlZCxcbiAgICAgICAgZGV0ZXJtaW5lRWxlbWVudFxuICAgICAgKVxuICAgICk7XG4gICAgaW5wdXQudmFsdWUgPSAnJztcbiAgfVxuICB1bC5pbm5lckhUTUwgPSB0ZW1wU3RvcmFnZS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBNdXRhdGVzIGEgdG9kbyBzbyB0aGF0IGl0cyBjb21wbGV0ZWQgZGF0YSBhdHRyaWJ1dGUgaXMgdG9nZ2xlZFxuICogQHBhcmFtIGxpc3RJdGVtIC0gQSBsaXN0IGl0ZW0gY3VycmVudGx5IGFwcGVuZGVkIHRvIHRoZSBET01cbiAqIEBwYXJhbSB2YWx1ZSAtIFdoYXQgdGhlIGNvbXBsZXRlZCBkYXRhIGF0dHJpYnV0ZSBzaG91bGQgYmUgc2V0IHRvXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlQXR0cmlidXRlKGxpc3RJdGVtOiBIVE1MTElFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikge1xuICBjb25zdCBpc0NvbXBsZXRlZCA9IHZhbHVlO1xuXG4gIGxpc3RJdGVtLmRhdGFzZXQuY29tcGxldGVkID0gaXNDb21wbGV0ZWQudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBUb2dnbGVzIHRoZSBhY3RpdmUgYXR0cmlidXRlIG9uIGEgbGlzdCBpdGVtXG4gKiBAcGFyYW0gbGlzdEl0ZW0gQW4gdW4tY29tcGxldGVkIGxpc3QgaXRlbVxuICovXG5mdW5jdGlvbiB0b2dnbGVBY3RpdmVBdHRyaWJ1dGUobGlzdEl0ZW06IEhUTUxMSUVsZW1lbnQpIHtcbiAgaWYgKGxpc3RJdGVtLmRhdGFzZXQuY3VycmVudGx5QWN0aXZlID09PSAndHJ1ZScpIHtcbiAgICBsaXN0SXRlbS5kYXRhc2V0LmN1cnJlbnRseUFjdGl2ZSA9ICdmYWxzZSc7XG4gIH0gZWxzZSB7XG4gICAgbGlzdEl0ZW0uZGF0YXNldC5jdXJyZW50bHlBY3RpdmUgPSAndHJ1ZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGEgVG9kbyA8bGk+IGZyb20gdGhlIERPTVxuICogQHBhcmFtIGlkIC0gQSB1bmlxdWUgaWQgYmVsb25naW5nIHRvIGFuIG9iamVjdCBvZiB0eXBlIFRvZG9cbiAqIEBwYXJhbSBtb2RlbCAtIFRoZSBnbG9iYWwgc3RhdGVcbiAqIEBwYXJhbSBsaXN0RWxlbWVudCAtIEEgbGlzdCBlbGVtZW50IHRvIGJlIHJlbW92ZWRcbiAqIEByZXR1cm5zIHtUb2RvfSBUaGUgZGVsZXRlZCBUb2RvIG9iamVjdFxuICovXG5mdW5jdGlvbiBkZWxldGVUb2RvKFxuICBpZDogc3RyaW5nLFxuICBtb2RlbDogTW9kZWwsXG4gIGxpc3RFbGVtZW50OiBIVE1MTElFbGVtZW50XG4pOiBUb2RvIHtcbiAgY29uc3QgdG9kbyA9IGZpbmRUb2RvKGlkLCBtb2RlbCk7XG4gIGxpc3RFbGVtZW50LnJlbW92ZSgpO1xuXG4gIHJldHVybiB0b2RvO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGdsb2JhbCBzdGF0ZSwgdG9nZ2xlcyB0aGUgY29tcGxldGVkIGRhdGEgYXR0cmlidXRlIG9uIGEgbGlzdCBpdGVtIGFuZCByZXBsYWNlcyB0aGUgcCBlbGVtZW50IHdpdGggYSBkZWwgZWxlbWVudCBpZiBuZWVkZWRcbiAqIEBwYXJhbSBlIC0gQSBjbGljayBldmVudFxuICogQHBhcmFtIG1vZGVsIC0gVGhlIGdsb2JhbCBzdGF0ZVxuICogQHBhcmFtIGVsIC1cbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ29tcGxldGVkQ2xpY2soZTogRXZlbnQsIG1vZGVsOiBNb2RlbCwgZWwgPSB7fSkge1xuICBjb25zdCBjb21wbGV0ZUJ0biA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblxuICBjb25zdCBsaXN0SXRlbSA9IGNvbXBsZXRlQnRuLnBhcmVudEVsZW1lbnQgYXMgSFRNTExJRWxlbWVudDtcbiAgY29uc3QgaWQgPSBsaXN0SXRlbS5kYXRhc2V0LmlkO1xuXG4gIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY3VycmVudFRvZG8gPSBmaW5kVG9kbyhpZCwgbW9kZWwpO1xuICAgIGN1cnJlbnRUb2RvLmNvbXBsZXRlZCA9ICFjdXJyZW50VG9kby5jb21wbGV0ZWQ7XG5cbiAgICB1cGRhdGUoJ0NvbXBsZXRlVG9kbycsIG1vZGVsLCBjdXJyZW50VG9kbyk7XG5cbiAgICB0b2dnbGVDb21wbGV0ZUF0dHJpYnV0ZShsaXN0SXRlbSwgY3VycmVudFRvZG8uY29tcGxldGVkKTtcbiAgfVxufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIG51bWJlciBvZiB0b2RvcyBpbiB0aGUgZGlzcGxheSBiYXIocylcbiAqIEBwYXJhbSBtb2RlbCBUaGUgY3VycmVudCBzdGF0ZSB3aGljaCBzaG91bGQga25vdyB3aGljaCB0b2RvcyBhcmUgY3VycmVudGx5IGNvbXBsZXRlZFxuICovXG5mdW5jdGlvbiByZW5kZXJOdW1iZXJPZlRvZG9zKG1vZGVsOiBNb2RlbCkge1xuICBjb25zdCB0b2Rvc0xlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICcuaXRlbXMtbGVmdCBwJ1xuICApIGFzIE5vZGVMaXN0T2Y8SFRNTFBhcmFncmFwaEVsZW1lbnQ+O1xuXG4gIGNvbnN0IHVuQ29tcGxldGVkVG9kb3MgPSBtb2RlbC5BbGxUb2Rvcy5maWx0ZXIoKHRvZG8pID0+ICF0b2RvLmNvbXBsZXRlZCk7XG5cbiAgdG9kb3NMZWZ0LmZvckVhY2goKHRvZG8pID0+IHtcbiAgICBpZiAodW5Db21wbGV0ZWRUb2Rvcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRvZG8udGV4dENvbnRlbnQgPSBgJHt1bkNvbXBsZXRlZFRvZG9zLmxlbmd0aH0gaXRlbSBsZWZ0YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9kby50ZXh0Q29udGVudCA9IGAke3VuQ29tcGxldGVkVG9kb3MubGVuZ3RofSBpdGVtcyBsZWZ0YDtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVUaGVtZSh0aGVtZT86IEN1cnJlbnRUaGVtZSkge1xuICBjb25zdCBpbWFnZUljb24gPSB0aGVtZVRvZ2dsZXIuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgLy8gaWYgYSBjdXJyZW50IHRoZW1lIGV4aXN0cywgdXNlIHRoYXRcbiAgaWYgKHRoZW1lICE9IG51bGwpIHtcbiAgICBib2R5LmlkID0gdGhlbWUudGhlbWU7XG4gICAgaW1hZ2VJY29uLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhlbWUuaW1hZ2UpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBjdXJyZW50VGhlbWU6IEN1cnJlbnRUaGVtZSA9IHtcbiAgICB0aGVtZTogJycsXG4gICAgaW1hZ2U6ICcnLFxuICB9O1xuXG4gIGlmIChib2R5LmlkID09PSAnbGlnaHQnKSB7XG4gICAgYm9keS5pZCA9ICdkYXJrJztcbiAgICBpbWFnZUljb24uc2V0QXR0cmlidXRlKCdzcmMnLCAnL3NyYy9hc3NldHMvaW1hZ2VzL2ljb24tc3VuLnN2ZycpO1xuICAgIGNvbnN0IGltYWdlU3JjID0gaW1hZ2VJY29uLmdldEF0dHJpYnV0ZSgnc3JjJykgYXMgc3RyaW5nO1xuICAgIGN1cnJlbnRUaGVtZSA9IHsgdGhlbWU6IGJvZHkuaWQsIGltYWdlOiBpbWFnZVNyYyB9O1xuICAgIHNhdmVUaGVtZVRvTG9jYWxTdG9yYWdlKGN1cnJlbnRUaGVtZSk7XG4gIH0gZWxzZSB7XG4gICAgYm9keS5pZCA9ICdsaWdodCc7XG4gICAgaW1hZ2VJY29uLnNldEF0dHJpYnV0ZSgnc3JjJywgJy9zcmMvYXNzZXRzL2ltYWdlcy9pY29uLW1vb24uc3ZnJyk7XG4gICAgY29uc3QgaW1hZ2VTcmMgPSBpbWFnZUljb24uZ2V0QXR0cmlidXRlKCdzcmMnKSBhcyBzdHJpbmc7XG4gICAgY3VycmVudFRoZW1lID0geyB0aGVtZTogYm9keS5pZCwgaW1hZ2U6IGltYWdlU3JjIH07XG4gICAgc2F2ZVRoZW1lVG9Mb2NhbFN0b3JhZ2UoY3VycmVudFRoZW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvZ2dsZXMgdGhlIGFyaWEtc2VsZWN0ZWQgYXR0cmlidXRlIG9mIGEgdGFiIHRvIGVpdGhlciBcInRydWVcIiBvciBcIlwiIHdoaWxlIHJlc2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIG90aGVyIHRhYnNcbiAqIEBwYXJhbSB0YWIgT25lIG9mIHRoZSB0YWJzLCBhbGwsIGFjdGl2ZSBvciBjb21wbGV0ZWRcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlQXJpYVNlbGVjdGVkKHRhYjogSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgLy8gcmVzZXQgdGhlIGFyaWEtc2VsZWN0ZWQgYXR0cmlidXRlIG9uIGFsbCB0aGUgdGFic1xuICBjb25zdCBhbGxUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAnLnRhYnMgYnV0dG9uJ1xuICApIGFzIE5vZGVMaXN0T2Y8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuICBhbGxUYWJzLmZvckVhY2goKHRhYikgPT4ge1xuICAgIHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnJyk7XG4gIH0pO1xuXG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSB0YWIuZ2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJyk7XG4gIGlmIChpc1NlbGVjdGVkID09PSBudWxsIHx8IGlzU2VsZWN0ZWQgPT09ICcnKSB7XG4gICAgdGFiLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBzdGF0ZSB0byBtYXRjaCB0aGUgbmV3IG9yZGVyIG9mIGVsZW1lbnRzXG4gKiBAcGFyYW0gdGFyZ2V0XG4gKiBAcGFyYW0gbW9kZWxcbiAqL1xuZnVuY3Rpb24gdHVybkh0bWxUb1RvZG9BcnJheSh0YXJnZXQsIG1vZGVsKSB7XG4gIGNvbnN0IHN0cmlwcGVkVG9kb0lkID0gdGFyZ2V0LmRhdGFzZXQuaWQgYXMgc3RyaW5nO1xuICBjb25zdCB0b2RvOiBUb2RvID0gZmluZFRvZG8oc3RyaXBwZWRUb2RvSWQsIG1vZGVsKTtcbiAgY29uc3QgYWxsTGlzdEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAnLmxpc3QtaXRlbSdcbiAgKSBhcyBOb2RlTGlzdE9mPEhUTUxMSUVsZW1lbnQ+O1xuXG4gIGZvciAoY29uc3QgW2luZGV4LCB2YWx1ZV0gb2YgYWxsTGlzdEl0ZW1zLmVudHJpZXMoKSkge1xuICAgIGlmICh2YWx1ZS5kYXRhc2V0LmlkID09PSBzdHJpcHBlZFRvZG9JZCkge1xuICAgICAgdXBkYXRlKCdSZWFycmFuZ2VPcmRlcicsIG1vZGVsLCB0b2RvKTtcbiAgICB9XG4gIH1cblxuICBzYXZlVG9kb3NUb0xvY2FsU3RvcmFnZShtb2RlbC5BbGxUb2Rvcyk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERBVEFCQVNFXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBTYXZlcyB1c2VycyB0b2RvcyB0byBsb2NhbCBzdG9yYWdlXG4gKiBAcGFyYW0gdG9kb3MgLSBUaGUgZ2xvYmFsIHN0YXRlIHRoYXQgc2hvdWxkIGJlIHNhdmVkIHRvIGxvY2FsIHN0b3JhZ2VcbiAqL1xuZnVuY3Rpb24gc2F2ZVRvZG9zVG9Mb2NhbFN0b3JhZ2UodG9kb3M6IFRvZG9bXSkge1xuICBjb25zdCB0b2RvVG9Kc29uID0gSlNPTi5zdHJpbmdpZnkodG9kb3MpO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb3MnLCB0b2RvVG9Kc29uKTtcbn1cblxuLyoqXG4gKiBTYXZlcyB0aGUgdmFsdWUgb2YgdGhlIGJvZHkncyBpZCBwcm9wZXJ0eSBhbmQgdGhlIHNyYyBhdHRyaWJ1dGUgb2YgdGhlIGltYWdlIGljb24gdG8gbG9jYWwgc3RvcmFnZVxuICogQHBhcmFtIHRoZW1lIFRoZSBjdXJyZW50IHRoZW1lLCBsaWdodC9kYXJrICYmIHN1bi9tb29uLWljb25cbiAqL1xuZnVuY3Rpb24gc2F2ZVRoZW1lVG9Mb2NhbFN0b3JhZ2UodGhlbWU6IEN1cnJlbnRUaGVtZSkge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCBKU09OLnN0cmluZ2lmeSh0aGVtZSkpO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyBhIEpTT04gc3RyaW5nIGZyb20gbG9jYWxTdG9yYWdlXG4gKiBAcGFyYW0gaXRlbU5hbWUgLSBUaGUga2V5IGluIHRoZSBrZXk6dmFsdWUgcGFpciBvZiBsb2NhbFN0b3JhZ2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEVpdGhlciBhIHN0cmluZyBvZiB0aGUgdXNlcnMgdG9kb3Mgb3IgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZ2V0SXRlbXNGcm9tTG9jYWxTdG9yYWdlKGl0ZW1OYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBzdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oaXRlbU5hbWUpO1xuICByZXR1cm4gc3RvcmFnZSAhPT0gbnVsbCA/IHN0b3JhZ2UgOiAnW10nO1xufVxuXG4vKipcbiAqIFBhcnNlcyB0aGUgdXNlcnMgdG9kbydzXG4gKiBAcGFyYW0gaXRlbSAtIFBhcnNlcyBhIHN0cmluZ1xuICogQHJldHVybnMge1RvZG9bXX0gQW4gYXJyYXkgb2Ygb2JqZWN0cyBvZiB0eXBlIFRvZG9cbiAqL1xuZnVuY3Rpb24gcGFyc2VUb2RvcyhpdGVtOiBzdHJpbmcpOiBUb2RvW10ge1xuICByZXR1cm4gSlNPTi5wYXJzZShpdGVtKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhFTFBFUiBGVU5DVElPTlNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLyoqXG4gKiBDcmVhdGVzIGEgbGlzdCBpdGVtXG4gKiBAcGFyYW0gaWQgLSBUaGUgdW5pcXVlIElEIG9mIHRoZSBsaXN0IGl0ZW0gdG9kb1xuICogQHBhcmFtIHRleHQgLSBUaGUgYWN0dWFsIHRvZG8gaXRzZWxmXG4gKiBAcGFyYW0gZWwgLSBSZXByZXNlbnRzIGFuIEh0bWwgZWxlbWVudCwgaW5zIGFuZCBkZWwgYXJlIHNlbWFudGljYWxseSBjb3JyZWN0IGJ1dCBhIHAgdGFnIGNhbiBiZSB1c2VkIGFzIHdlbGxcbiAqIEBwYXJhbSBjb21wbGV0ZWQgLSBSZWZsZWN0cyB3aGV0aGVyIHRoZSBjb21wbGV0ZSBidXR0b24gaGFzIGJlZW4gY2xpY2tlZCBvciBub3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBpbm5lciBIVE1MIG9mIHRoZSA8bGk+IGluY2x1ZGluZyB0aGUgbGkgaXRzZWxmXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RJdGVtKFxuICBpZDogc3RyaW5nLFxuICB0ZXh0OiBzdHJpbmcsXG4gIGNvbXBsZXRlZDogYm9vbGVhbiA9IGZhbHNlLFxuICBlbDogYWxsb3dlZEVsZW1lbnRzID0gJ3AnXG4pOiBzdHJpbmcge1xuICBjb25zdCBsaXN0SXRlbSA9IGBcbiAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1pdGVtXCIgZGF0YS1pZD0ke2lkfSBkYXRhLWNvbXBsZXRlZD1cIiR7Y29tcGxldGVkfVwiIGRyYWdnYWJsZT1cInRydWVcIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY29tcGxldGUtYnRuXCI+XG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9zcmMvYXNzZXRzL2ltYWdlcy9pY29uLWNoZWNrLnN2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGFsdD1cIlwiIC8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPCR7ZWx9IGNsYXNzPVwibGlzdC1pdGVtLXRleHRcIiBjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCI+JHt0ZXh0fTwvJHtlbH0+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlbGV0ZS1idG4gdG9kby1kZWxldGUtaWNvblwiPlxuICAgICAgICAgICAgPGltZyBjbGFzcz1cImRcIiBzcmM9XCIvc3JjL2Fzc2V0cy9pbWFnZXMvaWNvbi1jcm9zcy5zdmdcIiBhbHQ9XCJcIiAvPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2xpPlxuICAgIGA7XG5cbiAgcmV0dXJuIGxpc3RJdGVtO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBlbXB0eS4gV2lsbCB0cmltIHRoZSB0aGUgbWlkZGxlIG9mIHRoZSBzdHJpbmdcbiAqIEBwYXJhbSBzdHIgLSBBIHN0cmluZyB0aGF0IHdpbGwgYmUgY2hlY2tlZFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgc3RyaW5nIGlzIGVtcHR5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gQ2hlY2tJZkVtcHR5U3RyaW5nKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdHIudHJpbSgpID09PSAnJztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgaWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgdW5pcXVlIElEXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IG9mIHR5cGUgVG9kb1xuICogQHBhcmFtIHZhbHVlIC0gQSBzdHJpbmcgd2hpY2ggc2hvdWxkIGJlIHRoZSBhY3R1YWwgdG9kbyBpdHNlbGZcbiAqIEByZXR1cm5zIHtUb2RvfSBBIHRvZG8gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRvZG9PYmplY3QodmFsdWU6IHN0cmluZyk6IFRvZG8ge1xuICByZXR1cm4ge1xuICAgIGlkOiBnZW5lcmF0ZUlkKCksXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGZvciB0aGUgdHlwZSBvZiBidXR0b24gYmVpbmcgcGFzc2VkIGluXG4gKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBidXR0b24gdGhhdCB3YXMgY2xpY2tlZCBvblxuICogQHJldHVybnMge3ZhbGlkQnV0dG9ufSBBIG1lc3NhZ2Ugc3RhdGluZyB0aGUgdHlwZSBvZiBidXR0b24gdGhhdCB3YXMgY2xpY2tlZCBvblxuICogQHRocm93cyB7bmV3IEVycm9yfSBBIHN0cmluZyBlcnJvciBidWlsdCB3aXRoIHRoZSBFcnJvciBjb25zdHJ1Y3RvclxuICogQGV4YW1wbGUgY2hlY2tUeXBlT2ZCdXR0b24oZGVsZXRlQnRuKSAtPiAnZGVsZXRlLWJ0bidcbiAqL1xuZnVuY3Rpb24gY2hlY2tUeXBlT2ZCdXR0b24oZWxlbWVudDogSFRNTEJ1dHRvbkVsZW1lbnQpOiB2YWxpZEJ1dHRvbiB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygndG9kby1kZWxldGUtaWNvbicpKSB7XG4gICAgcmV0dXJuICdkZWxldGUtYnRuJztcbiAgfSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnY29tcGxldGUtYnRuJykpIHtcbiAgICByZXR1cm4gJ2NvbXBsZXRlLWJ0bic7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICdub3QtYS1idXR0b24nO1xuICB9XG59XG5cbi8qKlxuICogRmluZHMgYSBzcGVjaWZpYyBUb2RvIGJhc2VkIG9uIGFuIElEXG4gKiBAcGFyYW0gaWQgLSBBIHVuaXF1ZSBJRCBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9mIHR5cGUgVG9kb1xuICogQHBhcmFtIG1vZGVsIC0gVGhlIGdsb2JhbCBzdGF0ZVxuICogQHJldHVybnMge1RvZG99IFRoZSBUb2RvIHdoaWNoIG1hdGNoZXMgdGhlIGlkIHBhc3NlZCBpblxuICovXG5mdW5jdGlvbiBmaW5kVG9kbyhpZDogc3RyaW5nLCBtb2RlbDogTW9kZWwpOiBUb2RvIHtcbiAgY29uc3QgbWF0Y2hpbmdUb2RvID0gbW9kZWwuQWxsVG9kb3MuZmlsdGVyKCh0b2RvKSA9PiB0b2RvLmlkID09PSBpZCk7XG5cbiAgcmV0dXJuIG1hdGNoaW5nVG9kb1swXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3VG9kbyBvdXQgb2YgdGhlIGV4YW1wbGUgdG9kb1xuICogQHBhcmFtIHRlbXBsYXRlIC0gVGhlIHRlbXBsYXRlIHRvIGNsb25lIGFuZCB0dXJuIGludG8gYSBuZXdUb2RvIG9iamVjdFxuICogQHJldHVybnMgVGhlIGV4YW1wbGUgVG9kb1xuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0SXRlbU5vZGUodGVtcGxhdGU6IEhUTUxUZW1wbGF0ZUVsZW1lbnQpOiBUb2RvIHtcbiAgY29uc3QgZG9jRnJhZ21lbnQ6IERvY3VtZW50RnJhZ21lbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICBjb25zdCBsaXN0SXRlbUNsb25lID0gZG9jRnJhZ21lbnQuZmlyc3RFbGVtZW50Q2hpbGQ/LmNsb25lTm9kZShcbiAgICB0cnVlXG4gICkgYXMgSFRNTExJRWxlbWVudDtcblxuICBjb25zdCBpZCA9IGxpc3RJdGVtQ2xvbmUuZGF0YXNldC5pZCBhcyBzdHJpbmc7XG4gIGNvbnN0IHBFbCA9IGxpc3RJdGVtQ2xvbmUuY2hpbGROb2Rlc1szXTtcbiAgY29uc3QgdGV4dCA9IHBFbC50ZXh0Q29udGVudD8udHJpbSgpIGFzIHN0cmluZztcblxuICBjb25zdCBuZXdUb2RvOiBUb2RvID0ge1xuICAgIGlkOiBpZCxcbiAgICB2YWx1ZTogdGV4dCxcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHJldHVybiBuZXdUb2RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSA8cD4gZWxlbWVudFxuICogQHBhcmFtIHRleHQgLSBUaGUgdGV4dCBjb250ZW50IG9mIHRoZSBlbGVtZW50XG4gKiBAcmV0dXJucyBBIHBhcmFncmFwaCBlbGVtZW50IHdoaWNoIHdpbGwgYmUgdGhlIHRvZG8gaXRzZWxmLiBJdCBjYW4gYmUgZWRpdGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhcmFncmFwaEVsZW1lbnQodGV4dDogc3RyaW5nKTogSFRNTFBhcmFncmFwaEVsZW1lbnQge1xuICBjb25zdCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBwLnRleHRDb250ZW50ID0gdGV4dDtcbiAgcC5jbGFzc05hbWUgPSAnbGlzdC1pdGVtLXRleHQnO1xuICBwLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgJ3RydWUnKTtcblxuICByZXR1cm4gcDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgPGRlbD4gZWxlbWVudFxuICogQHBhcmFtIHRleHQgLSBUaGUgdGV4dCBjb250ZW50IG9mIHRoZSBlbGVtZW50XG4gKiBAcmV0dXJucyBBIGRlbCBlbGVtZW50IHdoaWNoIHdpbGwgYmUgdGhlIHRvZG8gaXRzZWxmLiBJdCBjYW5ub3QgYmUgZWRpdGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlbEVsZW1lbnQodGV4dDogc3RyaW5nKTogSFRNTE1vZEVsZW1lbnQge1xuICBjb25zdCBkZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZWwnKTtcbiAgZGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgZGVsLmNsYXNzTmFtZSA9ICdsaXN0LWl0ZW0tdGV4dCc7XG5cbiAgcmV0dXJuIGRlbDtcbn1cblxuLyoqXG4gKiBTZWxlY3RzIGFsbCBvZiB0aGUgbGlzdCBpdGVtcyB0b2RvcyBmcm9tIHRoZSBET00sIHR1cm5zIHRoZW0gaW50byBhbiBhcnJheSBhbmQgcmV0dXJucyB0aGUgY29tcGxldGVkIG9uZXNcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIExpc3QgSXRlbSB0b2Rvc1xuICovXG5mdW5jdGlvbiBnZXRDb21wbGV0ZWRMaXN0SXRlbXMoKSB7XG4gIGNvbnN0IGxpc3RJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJy5saXN0LWl0ZW0nXG4gICkgYXMgTm9kZUxpc3RPZjxIVE1MTElFbGVtZW50PjtcbiAgY29uc3QgbGlzdEl0ZW1zQXJyYXk6IEhUTUxMSUVsZW1lbnRbXSA9IFsuLi5saXN0SXRlbXNdO1xuICBjb25zdCBjb21wbGV0ZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXNBcnJheS5maWx0ZXIoXG4gICAgKGxpKSA9PiBsaS5kYXRhc2V0LmNvbXBsZXRlZCA9PT0gJ3RydWUnXG4gICk7XG5cbiAgcmV0dXJuIGNvbXBsZXRlZExpc3RJdGVtcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBkZXBlbmRpbmcgb24gdGhlIHN0cmluZy4gVXNlZCBtYWlubHkgZm9yIGNvbnZlcnRpbmcgdGhlIDxsaT4uZGF0YXNldC5jb21wbGV0ZWQgZnJvbSBhIHN0cmluZyB0byBhIGJvb2wgc2luY2UgdHlwZSBUb2RvIHJlcXVpcmVzIGEgYm9vbGVhblxuICogQHBhcmFtIHN0ciBBIHN0cmluZyB0byBjb252ZXJ0IHRvIGEgYm9vbGVhbi4gV2lsbCByZXR1cm4gdHJ1ZSBmb3IgXCJ0cnVlXCIgZWxzZSBmYWxzZSBmb3IgYW55dGhpbmcgZWxzZVxuICogQHJldHVybnMgdHJ1ZSBvciBmYWxzZVxuICovXG5mdW5jdGlvbiBjb252ZXJ0U3RyaW5nVG9Cb29sKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmIChzdHIgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBhZnRlciB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBhIGRyYWdnZWQgZWxlbWVudFxuICovXG4vL1RPRE86IHRyeSBhZGRpbmcgZXZlbnQgbGlzdGVuZXJzIHdoZW4gPT09IHVuZGVmaW5lZFxuZnVuY3Rpb24gZ2V0RHJhZ0FmdGVyRWxlbWVudChjb250YWluZXIsIHk6IG51bWJlcikge1xuICBjb25zdCBkcmFnZ2FibGVFbGVtZW50cyA9IFtcbiAgICAuLi5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZT1cInRydWVcIl06bm90KC5kcmFnZ2luZyknKSxcbiAgXTtcblxuICByZXR1cm4gZHJhZ2dhYmxlRWxlbWVudHMucmVkdWNlKFxuICAgIChjbG9zZXN0LCBjaGlsZCkgPT4ge1xuICAgICAgY29uc3QgYm94ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBvZmZzZXQgPSB5IC0gYm94LnRvcCAtIGJveC5oZWlnaHQgLyAyO1xuXG4gICAgICBpZiAob2Zmc2V0IDwgMCAmJiBvZmZzZXQgPiBjbG9zZXN0Lm9mZnNldCkge1xuICAgICAgICByZXR1cm4geyBvZmZzZXQ6IG9mZnNldCwgZWxlbWVudDogY2hpbGQgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBvZmZzZXQ6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSB9XG4gICkuZWxlbWVudDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVVUQVRJT04gT0JTRVJWRVJTXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8qKlxuICogIE11dGF0aW9uIHRoYXQgc2hvdWxkIG9jY3VyIHRvIGEgdG9kbyBsaXN0IGl0ZW0gd2hlbiB0aGUgY29tcGxldGUgYnV0dG9uIGlzIGNsaWNrZWRcbiAqIEBwYXJhbSBtdXRhdGlvbkxpc3QgVGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggbXV0YXRpb25cbiAqIEBwYXJhbSBtb2RlbCBVc2VkIGJlY2F1c2UgdGhlIGdsb2JhbCBzdGF0ZSBvZiB0aGUgdG9kb3MgaXMgcmVxdWlyZWRcbiAqL1xuZnVuY3Rpb24gbXV0YXRlQ29tcGxldGVkVG9kb3MobXV0YXRpb25MaXN0OiBNdXRhdGlvblJlY29yZFtdLCBtb2RlbDogTW9kZWwpIHtcbiAgLy8gY2hlY2sgdGhlIHR5cGUgb2YgbXV0YXRpb25cbiAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbkxpc3QpIHtcbiAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiBhbnkgbXV0YXRpb24gaGFzIG9jY3VycmVkXG4gICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc3QgYWxsQ29tcGxldGVCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbXBsZXRlLWJ0bicpO1xuXG4gICAgICAgIGFsbENvbXBsZXRlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAvLyByZW1vdmUgYW55IHByZXZpb3VzIGV2ZW50IGxpc3RlbmVycyBiZWZvcmUgYWRkaW5nIGFueW1vcmUgaW4gb3JkZXIgdG8gYXZvaWQgYW55IHN0cmFuZ2UgYmVoYXZpb3JcbiAgICAgICAgICBidXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7fSk7XG5cbiAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGxpc3RJdGVtLCBpdHMgZmlyc3QgY2hpbGQgd2hpY2ggd2lsbCBlaXRoZXIgYnkgYSBwIHRhZyBvciBhIGRlbCB0YWcgYW5kIGl0cyB0ZXh0IGNvbnRlbnRcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gYnV0dG9uLnBhcmVudEVsZW1lbnQgYXMgSFRNTExJRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IHBPckRlbCA9IGxpc3RJdGVtLmNoaWxkcmVuWzFdO1xuICAgICAgICAgICAgY29uc3QgdG9kb1RleHQgPSBwT3JEZWwudGV4dENvbnRlbnQgYXMgc3RyaW5nO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgZWxlbWVudCB0aGF0IHdpbGwgYmUgaW5zZXJ0ZWQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHRvZG8gaXMgY29tcGxldGVkIG9yIG5vdFxuICAgICAgICAgICAgY29uc3QgZGVsID0gY3JlYXRlRGVsRWxlbWVudCh0b2RvVGV4dCk7XG4gICAgICAgICAgICBjb25zdCBwID0gY3JlYXRlUGFyYWdyYXBoRWxlbWVudCh0b2RvVGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChwT3JEZWwgaW5zdGFuY2VvZiBIVE1MUGFyYWdyYXBoRWxlbWVudCkge1xuICAgICAgICAgICAgICBsaXN0SXRlbS5yZXBsYWNlQ2hpbGQoZGVsLCBwT3JEZWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGlzdEl0ZW0ucmVwbGFjZUNoaWxkKHAsIHBPckRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY29tcGxldGVkIHN0YXR1cyBvZiB0aGUgdG9kb1xuICAgICAgICAgICAgaWYgKGxpc3RJdGVtLmRhdGFzZXQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VG9kbyA9IGZpbmRUb2RvKGxpc3RJdGVtLmRhdGFzZXQuaWQsIG1vZGVsKTtcbiAgICAgICAgICAgICAgY29uc3Qgb3Bwb3NpdGUgPSAhY3VycmVudFRvZG8uY29tcGxldGVkO1xuICAgICAgICAgICAgICBsaXN0SXRlbS5kYXRhc2V0LmNvbXBsZXRlZCA9IFN0cmluZyhvcHBvc2l0ZSk7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKCdDb21wbGV0ZVRvZG8nLCBtb2RlbCwgY3VycmVudFRvZG8pO1xuICAgICAgICAgICAgICBzYXZlVG9kb3NUb0xvY2FsU3RvcmFnZShtb2RlbC5BbGxUb2Rvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqICBNdXRhdGlvbiB0aGF0IHNob3VsZCBvY2N1ciB0aGUgZGlzcGxheSBvbiB0aGUgc3RhdHVzIGJhciB0aGF0IHNob3dzIHRoZSByZW1haW5pbmcgdW4tY29tcGxldGVkIHRvZG9zXG4gKiBAcGFyYW0gbXV0YXRpb25MaXN0IFRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIG11dGF0aW9uXG4gKiBAcGFyYW0gbW9kZWwgVXNlZCBiZWNhdXNlIHRoZSBnbG9iYWwgc3RhdGUgb2YgdGhlIHRvZG9zIGlzIHJlcXVpcmVkXG4gKi9cbmZ1bmN0aW9uIG11dGF0ZVJlbWFpbmluZ1RvZG9zRGlzcGxheShcbiAgbXV0YXRpb25MaXN0OiBNdXRhdGlvblJlY29yZFtdLFxuICBtb2RlbDogTW9kZWxcbikge1xuICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9uTGlzdCkge1xuICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgaWYgKFxuICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdIGluc3RhbmNlb2YgSFRNTE1vZEVsZW1lbnQgfHxcbiAgICAgICAgbXV0YXRpb24uYWRkZWROb2Rlc1swXSBpbnN0YW5jZW9mIEhUTUxQYXJhZ3JhcGhFbGVtZW50XG4gICAgICApIHtcbiAgICAgICAgcmVuZGVyTnVtYmVyT2ZUb2Rvcyhtb2RlbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogIE11dGF0aW9uIHRoYXQgc2hvdWxkIG9jY3VyIHRvIHRoZSBzdGF0dXMgYmFyIHdoZW4gdGhleSdyZSBubyB0b2RvcyBsZWZ0XG4gKiBAcGFyYW0gbXV0YXRpb25MaXN0IFRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBlYWNoIG11dGF0aW9uXG4gKiBAcGFyYW0gbW9kZWwgVXNlZCBiZWNhdXNlIHRoZSBnbG9iYWwgc3RhdGUgb2YgdGhlIHRvZG9zIGlzIHJlcXVpcmVkXG4gKi9cbmZ1bmN0aW9uIG11dGF0ZVN0YXR1c0JhcihtdXRhdGlvbkxpc3Q6IE11dGF0aW9uUmVjb3JkW10sIG1vZGVsOiBNb2RlbCkge1xuICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9uTGlzdCkge1xuICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKSBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgaWYgKG1vZGVsLkFsbFRvZG9zLmxlbmd0aCA9PT0gMCAmJiBtYWluICE9PSBudWxsKSB7XG4gICAgICAgIG1haW4uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFpbi5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtMjRweCknO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19"}