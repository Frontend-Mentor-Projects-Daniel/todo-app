{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// ------------------------------------------------------------------------------\n//                                 DOM NODES\n//-------------------------------------------------------------------------------\nconst todos = document.querySelectorAll(\n  '.todo-list-item'\n) as NodeListOf<HTMLLIElement>;\nconst form = document.querySelector('.create-bar-form') as HTMLFormElement;\nconst input = document.querySelector('.create-bar') as HTMLInputElement;\nconst ul = document.querySelector('.list') as HTMLUListElement;\nconst template = document.querySelector(\n  '#example-list-item'\n) as HTMLTemplateElement;\nconst themeToggler = document.querySelector(\n  '.theme-toggler'\n) as HTMLButtonElement;\nconst body = document.body as HTMLBodyElement;\n\n// ------------------------------------------------------------------------------\n//                                 TYPES\n//-------------------------------------------------------------------------------\ntype Todo = {\n  id: string;\n  value: string;\n  completed: boolean;\n};\n\ntype validButton = 'delete-btn' | 'complete-btn' | 'not-a-button';\n\ntype allowedElements = 'p' | 'del';\n\ntype CurrentTheme = {\n  theme: string;\n  image: string;\n};\n\n// ------------------------------------------------------------------------------\n//                                 MODEL\n//-------------------------------------------------------------------------------\ntype Model = {\n  AllTodos: Todo[];\n};\n\n// ------------------------------------------------------------------------------\n//                               GLOBAL STATE\n//-------------------------------------------------------------------------------\nconst init: Model = {\n  AllTodos: [],\n};\n\n// ------------------------------------------------------------------------------\n//                             UPDATE FUNCTION\n//-------------------------------------------------------------------------------\ntype Msg = 'AddTodo' | 'RemoveTodo' | 'UpdateTodo' | 'CompleteTodo';\n\nfunction update(msg: Msg, model: Model, value: Todo): void {\n  switch (msg) {\n    case 'AddTodo':\n      model.AllTodos.push(value);\n      break;\n\n    case 'RemoveTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos.splice(index, 1);\n        }\n      });\n      break;\n\n    case 'UpdateTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].value = value.value;\n        }\n      });\n      break;\n\n    case 'CompleteTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].completed = !value.completed;\n        }\n      });\n      break;\n  }\n}\n\n// ------------------------------------------------------------------------------\n//                                   SCRIPTS\n//-------------------------------------------------------------------------------\n\n// GET SAVED DATA FROM LOCAL STORAGE AND DISPLAY THEM\n((model: Model) => {\n  const getStoredTodos: string = getItemsFromLocalStorage('todos');\n  const parseStoredTodos: Todo[] = parseTodos(getStoredTodos);\n\n  // if there're no previous todo's, create example todo else update the state to contain all the stored todos\n  if (parseStoredTodos.length === 0) {\n    const newTodo = renderListItemNode(template);\n    update('AddTodo', model, newTodo);\n  } else {\n    for (const todo of parseStoredTodos) {\n      update('AddTodo', model, todo);\n    }\n  }\n\n  renderTodos(model.AllTodos);\n\n  // display last used theme\n  const lastActiveTheme = JSON.parse(getItemsFromLocalStorage('theme'));\n  // getItemsFromLocalStorage returns an empty array if the key isn't found\n  if (lastActiveTheme.length !== 0) {\n    toggleTheme(lastActiveTheme);\n  }\n\n  // update status bar to display the number of todos\n  renderNumberOfTodos(model);\n})(init);\n\n// CREATE NEW TODOS\n((model: Model) => {\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const getUserInput = input.value.trim();\n    const isUserInputEmpty = CheckIfEmptyString(getUserInput);\n    const createNewTodo = createTodoObject(getUserInput);\n\n    if (!isUserInputEmpty) {\n      update('AddTodo', model, createNewTodo);\n      saveTodosToLocalStorage(model.AllTodos);\n    }\n\n    renderTodos(model.AllTodos);\n\n    // when a todo is added, make sure that the status bar is updated\n    renderNumberOfTodos(model);\n  });\n})(init);\n\n// DELETE TODOS\n((model: Model) => {\n  ul.addEventListener('click', (e) => {\n    const deleteIconImage = e.target as HTMLImageElement;\n    const button = deleteIconImage.parentElement as HTMLButtonElement;\n\n    const listItem = button.parentElement as HTMLLIElement;\n\n    const todoId = listItem.dataset.id as string;\n    const isDeleteOrUpdateBtn = checkTypeOfButton(button);\n\n    if (isDeleteOrUpdateBtn === 'delete-btn') {\n      const todoThatShouldBeDeleted = findTodo(todoId, model);\n      deleteTodo(todoThatShouldBeDeleted.id, model, listItem);\n      update('RemoveTodo', model, todoThatShouldBeDeleted);\n      saveTodosToLocalStorage(model.AllTodos);\n\n      // when a todo is deleted, make sure that the status bar is updated\n      renderNumberOfTodos(model);\n    }\n  });\n})(init);\n\n// UPDATE TODOS\n((model: Model) => {\n  ul.addEventListener('focusout', (e) => {\n    const target = e.target;\n\n    if (target instanceof HTMLParagraphElement) {\n      const text = target.textContent !== null ? target.textContent : '';\n      const listItem = target.parentElement as HTMLLIElement;\n      const listItemID = listItem.dataset.id as string;\n      // strip out white spaces so that users can't update a todo to an empty line\n      const textPattern = text.replace(/ /g, '').trim();\n\n      // If white space or new line characters are the only things submitted, the todo will be turned back to the previous one\n      if (listItemID !== undefined && textPattern.length !== 0) {\n        const updatedTodo: Todo = {\n          id: listItemID,\n          value: text,\n          completed: false,\n        };\n        update('UpdateTodo', model, updatedTodo);\n        saveTodosToLocalStorage(model.AllTodos);\n      } else {\n        const previousTodo = findTodo(listItemID, model);\n        const previousText = previousTodo.value;\n        target.textContent = previousText;\n      }\n    }\n  });\n})(init);\n\n// COMPLETE TODO\n((model: Model) => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver((mutationList) => {\n    mutateCompletedTodos(mutationList, model);\n  });\n\n  // Start observing the target node for configured mutations\n  observer.observe(ul, config);\n\n  // add a mutation so that the mutationObserver code will automatically kick in\n  const newLi = document.createElement('li') as HTMLLIElement;\n  newLi.dataset.id = '000';\n  const shouldDelete = newLi;\n  ul.append(newLi);\n  if (shouldDelete.dataset.id === '000') {\n    shouldDelete.remove();\n  }\n})(init);\n\n// MOVE MAIN TAG WHEN THERE'RE NO TODOS\n((model: Model) => {\n  const config = { childList: true };\n\n  const observer = new MutationObserver((mutationList) => {\n    mutateStatusBar(mutationList, model);\n  });\n\n  observer.observe(ul, config);\n})(init);\n\n// TOGGLE THEME\n((model: Model) => {\n  themeToggler.addEventListener('click', (e) => {\n    toggleTheme();\n  });\n})(init);\n\n// FILTER TASKS\n((model: Model) => {})(init);\n\n// DISPLAY NUMBER OF UN-COMPLETED TODOS\n((model: Model) => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true, subtree: true };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver((mutationList) => {\n    mutateRemainingTodosDisplay(mutationList, model);\n  });\n\n  // Start observing the target node for configured mutations\n  observer.observe(ul, config);\n})(init);\n\n// CLEAR ALL COMPLETED TASKS\n((model: Model) => {\n  const clearButtons = document.querySelectorAll(\n    '.clear-btn'\n  ) as NodeListOf<HTMLButtonElement>;\n\n  clearButtons.forEach((button) => {\n    button.addEventListener('click', (e) => {\n      const completedListItems: HTMLLIElement[] = getCompletedListItems();\n      let counter = 0;\n\n      const completedTodos = model.AllTodos.filter((todo) => todo.completed);\n\n      completedTodos.forEach((todo) => {\n        update('RemoveTodo', model, todo);\n        saveTodosToLocalStorage(model.AllTodos);\n        deleteTodo(todo.id, model, completedListItems[counter]);\n        counter++;\n      });\n    });\n  });\n})(init);\n\n// DRAG AND DROP TASKS\n((model: Model) => {})(init);\n\n// ------------------------------------------------------------------------------\n//                              VIEW FUNCTIONS\n//-------------------------------------------------------------------------------\n\n/**\n * Displays all the todos from the global state unto the page\n * @param todos - The global state\n */\nfunction renderTodos(todos: Todo[]) {\n  ul.innerHTML = '';\n\n  let tempStorage: string[] = [];\n  for (const todo of todos) {\n    const determineElement = todo.completed ? 'del' : 'p';\n\n    tempStorage.push(\n      createListItem(\n        todo.id,\n        todo.value.trim(),\n        todo.completed,\n        determineElement\n      )\n    );\n    input.value = '';\n  }\n  ul.innerHTML = tempStorage.join('');\n}\n\n/**\n * Mutates a todo so that its completed data attribute is toggled\n * @param listItem - A list item currently appended to the DOM\n * @param value - What the completed data attribute should be set to\n */\nfunction toggleCompleteAttribute(listItem: HTMLLIElement, value: boolean) {\n  const isCompleted = value;\n\n  listItem.dataset.completed = isCompleted.toString();\n}\n\n/**\n * Removes a Todo <li> from the DOM\n * @param id - A unique id belonging to an object of type Todo\n * @param model - The global state\n * @param listElement - A list element to be removed\n * @returns {Todo} The deleted Todo object\n */\nfunction deleteTodo(\n  id: string,\n  model: Model,\n  listElement: HTMLLIElement\n): Todo {\n  const todo = findTodo(id, model);\n  listElement.remove();\n\n  return todo;\n}\n\n/**\n * Updates the global state, toggles the completed data attribute on a list item and replaces the p element with a del element if needed\n * @param e - A click event\n * @param model - The global state\n * @param el -\n */\nfunction handleCompletedClick(e: Event, model: Model, el = {}) {\n  const completeBtn = e.currentTarget as HTMLButtonElement;\n\n  const listItem = completeBtn.parentElement as HTMLLIElement;\n  const id = listItem.dataset.id;\n\n  if (id !== undefined) {\n    const currentTodo = findTodo(id, model);\n    currentTodo.completed = !currentTodo.completed;\n\n    update('CompleteTodo', model, currentTodo);\n\n    toggleCompleteAttribute(listItem, currentTodo.completed);\n  }\n}\n\n/**\n * Changes the number of todos in the display bar(s)\n * @param model The current state which should know which todos are currently completed\n */\nfunction renderNumberOfTodos(model: Model) {\n  const todosLeft = document.querySelectorAll(\n    '.items-left p'\n  ) as NodeListOf<HTMLParagraphElement>;\n\n  const unCompletedTodos = model.AllTodos.filter((todo) => !todo.completed);\n\n  todosLeft.forEach((todo) => {\n    if (unCompletedTodos.length === 1) {\n      todo.textContent = `${unCompletedTodos.length} item left`;\n    } else {\n      todo.textContent = `${unCompletedTodos.length} items left`;\n    }\n  });\n}\n\nfunction toggleTheme(theme?: CurrentTheme) {\n  const imageIcon = themeToggler.firstElementChild as HTMLImageElement;\n  // if a current theme exists, use that\n  if (theme != null) {\n    body.id = theme.theme;\n    imageIcon.setAttribute('src', theme.image);\n    return;\n  }\n\n  let currentTheme: CurrentTheme = {\n    theme: '',\n    image: '',\n  };\n\n  if (body.id === 'light') {\n    body.id = 'dark';\n    imageIcon.setAttribute('src', '/src/assets/images/icon-sun.svg');\n    const imageSrc = imageIcon.getAttribute('src') as string;\n    currentTheme = { theme: body.id, image: imageSrc };\n    saveThemeToLocalStorage(currentTheme);\n  } else {\n    body.id = 'light';\n    imageIcon.setAttribute('src', '/src/assets/images/icon-moon.svg');\n    const imageSrc = imageIcon.getAttribute('src') as string;\n    currentTheme = { theme: body.id, image: imageSrc };\n    saveThemeToLocalStorage(currentTheme);\n  }\n}\n\n// ------------------------------------------------------------------------------\n//                                   DATABASE\n//-------------------------------------------------------------------------------\n\n/**\n * Saves users todos to local storage\n * @param todos - The global state that should be saved to local storage\n */\nfunction saveTodosToLocalStorage(todos: Todo[]) {\n  const todoToJson = JSON.stringify(todos);\n  localStorage.setItem('todos', todoToJson);\n}\n\n/**\n * Saves the value of the body's id property and the src attribute of the image icon to local storage\n * @param theme The current theme, light/dark && sun/moon-icon\n */\nfunction saveThemeToLocalStorage(theme: CurrentTheme) {\n  localStorage.setItem('theme', JSON.stringify(theme));\n}\n\n/**\n * Retrieves a JSON string from localStorage\n * @param itemName - The key in the key:value pair of localStorage\n * @returns {string} Either a string of the users todos or an empty array\n */\nfunction getItemsFromLocalStorage(itemName: string): string {\n  const storage = localStorage.getItem(itemName);\n  return storage !== null ? storage : '[]';\n}\n\n/**\n * Parses the users todo's\n * @param item - Parses a string\n * @returns {Todo[]} An array of objects of type Todo\n */\nfunction parseTodos(item: string): Todo[] {\n  return JSON.parse(item);\n}\n\n// ------------------------------------------------------------------------------\n//                              HELPER FUNCTIONS\n//-------------------------------------------------------------------------------\n/**\n * Creates a list item\n * @param id - The unique ID of the list item todo\n * @param text - The actual todo itself\n * @param el - Represents an Html element, ins and del are semantically correct but a p tag can be used as well\n * @param completed - Reflects whether the complete button has been clicked or not\n * @returns {string} The inner HTML of the <li> including the li itself\n */\nfunction createListItem(\n  id: string,\n  text: string,\n  completed: boolean = false,\n  el: allowedElements = 'p'\n): string {\n  const listItem = `\n        <li class=\"list-item\" data-id=${id} data-completed=\"${completed}\">\n          <button class=\"complete-btn\">\n            <img src=\"/src/assets/images/icon-check.svg\" aria-hidden=\"true\" alt=\"\" />\n          </button>\n          <${el} class=\"list-item-text\" contenteditable=\"true\">${text}</${el}>\n          <button class=\"delete-btn todo-delete-icon\">\n            <img class=\"d\" src=\"/src/assets/images/icon-cross.svg\" alt=\"\" />\n          </button>\n        </li>\n    `;\n\n  return listItem;\n}\n\n/**\n * Checks if a string is empty. Will trim the the middle of the string\n * @param str - A string that will be checked\n * @returns {boolean} True if string is empty, false otherwise\n */\nfunction CheckIfEmptyString(str: string): boolean {\n  return str.trim() === '';\n}\n\n/**\n * Generates a unique id\n * @returns {string} A unique ID\n */\nfunction generateId(): string {\n  return Math.random().toString(36).slice(2);\n}\n\n/**\n * Creates an object of type Todo\n * @param value - A string which should be the actual todo itself\n * @returns {Todo} A todo object\n */\nfunction createTodoObject(value: string): Todo {\n  return {\n    id: generateId(),\n    value: value,\n    completed: false,\n  };\n}\n\n/**\n * Checks for the type of button being passed in\n * @param element - The button that was clicked on\n * @returns {validButton} A message stating the type of button that was clicked on\n * @throws {new Error} A string error built with the Error constructor\n * @example checkTypeOfButton(deleteBtn) -> 'delete-btn'\n */\nfunction checkTypeOfButton(element: HTMLButtonElement): validButton {\n  if (element.classList.contains('todo-delete-icon')) {\n    return 'delete-btn';\n  } else if (element.classList.contains('complete-btn')) {\n    return 'complete-btn';\n  } else {\n    return 'not-a-button';\n  }\n}\n\n/**\n * Finds a specific Todo based on an ID\n * @param id - A unique ID belonging to an object of type Todo\n * @param model - The global state\n * @returns {Todo} The Todo which matches the id passed in\n */\nfunction findTodo(id: string, model: Model): Todo {\n  const matchingTodo = model.AllTodos.filter((todo) => todo.id === id);\n\n  return matchingTodo[0];\n}\n\n/**\n * Creates a newTodo out of the example todo\n * @param template - The template to clone and turn into a newTodo object\n * @returns The example Todo\n */\nfunction renderListItemNode(template: HTMLTemplateElement): Todo {\n  const docFragment: DocumentFragment = template.content;\n  const listItemClone = docFragment.firstElementChild?.cloneNode(\n    true\n  ) as HTMLLIElement;\n\n  const id = listItemClone.dataset.id as string;\n  const pEl = listItemClone.childNodes[3];\n  const text = pEl.textContent?.trim() as string;\n\n  const newTodo: Todo = {\n    id: id,\n    value: text,\n    completed: false,\n  };\n\n  return newTodo;\n}\n\n/**\n * Creates a <p> element\n * @param text - The text content of the element\n * @returns A paragraph element which will be the todo itself. It can be edited\n */\nfunction createParagraphElement(text: string): HTMLParagraphElement {\n  const p = document.createElement('p');\n  p.textContent = text;\n  p.className = 'list-item-text';\n  p.setAttribute('contenteditable', 'true');\n\n  return p;\n}\n\n/**\n * Creates a <del> element\n * @param text - The text content of the element\n * @returns A del element which will be the todo itself. It cannot be edited\n */\nfunction createDelElement(text: string): HTMLModElement {\n  const del = document.createElement('del');\n  del.textContent = text;\n  del.className = 'list-item-text';\n\n  return del;\n}\n\n/**\n * Selects all of the list items todos from the DOM, turns them into an array and returns the completed ones\n * @returns An array of List Item todos\n */\nfunction getCompletedListItems() {\n  const listItems = document.querySelectorAll(\n    '.list-item'\n  ) as NodeListOf<HTMLLIElement>;\n  const listItemsArray: HTMLLIElement[] = [...listItems];\n  const completedListItems = listItemsArray.filter(\n    (li) => li.dataset.completed === 'true'\n  );\n\n  return completedListItems;\n}\n\n// ------------------------------------------------------------------------------\n//                             MUTATION OBSERVERS\n//-------------------------------------------------------------------------------\n/**\n *  Mutation that should occur to a todo list item when the complete button is clicked\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateCompletedTodos(mutationList: MutationRecord[], model: Model) {\n  // check the type of mutation\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      // check to see if any mutation has occurred\n      if (mutation.addedNodes.length !== 0) {\n        const allCompleteButtons = document.querySelectorAll('.complete-btn');\n\n        allCompleteButtons.forEach((button) => {\n          // remove any previous event listeners before adding anymore in order to avoid any strange behavior\n          button.removeEventListener('click', () => {});\n\n          button.addEventListener('click', () => {\n            // get the listItem, its first child which will either by a p tag or a del tag and its text content\n            const listItem = button.parentElement as HTMLLIElement;\n            const pOrDel = listItem.children[1];\n            const todoText = pOrDel.textContent as string;\n\n            // create a new element that will be inserted depending on whether the todo is completed or not\n            const del = createDelElement(todoText);\n            const p = createParagraphElement(todoText);\n\n            if (pOrDel instanceof HTMLParagraphElement) {\n              listItem.replaceChild(del, pOrDel);\n            } else {\n              listItem.replaceChild(p, pOrDel);\n            }\n\n            // update the completed status of the todo\n            if (listItem.dataset.id != null) {\n              const currentTodo = findTodo(listItem.dataset.id, model);\n              const opposite = !currentTodo.completed;\n              listItem.dataset.completed = String(opposite);\n\n              update('CompleteTodo', model, currentTodo);\n              saveTodosToLocalStorage(model.AllTodos);\n            }\n          });\n        });\n      }\n    }\n  }\n}\n\n/**\n *  Mutation that should occur the display on the status bar that shows the remaining un-completed todos\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateRemainingTodosDisplay(\n  mutationList: MutationRecord[],\n  model: Model\n) {\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      if (\n        mutation.addedNodes[0] instanceof HTMLModElement ||\n        mutation.addedNodes[0] instanceof HTMLParagraphElement\n      ) {\n        renderNumberOfTodos(model);\n      }\n    }\n  }\n}\n\n/**\n *  Mutation that should occur to the status bar when they're no todos left\n * @param mutationList The data associated with each mutation\n * @param model Used because the global state of the todos is required\n */\nfunction mutateStatusBar(mutationList: MutationRecord[], model: Model) {\n  for (const mutation of mutationList) {\n    if (mutation.type === 'childList') {\n      const main = document.querySelector('main') as HTMLElement;\n\n      if (model.AllTodos.length === 0 && main !== null) {\n        main.style.transform = 'translateY(0)';\n      } else {\n        main.style.transform = 'translateY(-24px)';\n      }\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}