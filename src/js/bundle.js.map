{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// WHEN USER CLICKS ON COMPLETED BUTTON, ADD GRADIENT\n// get the id of the todo\n// find the specific todo\n// change the completed property to true\n// Save the state\n\n// WHEN USER CLICKS ON COMPLETED BUTTON, ADD LINE THROUGH\n// get the id of the todo\n// find the specific todo\n// change the p tag to a del tag\n// -> This will probably require some updating of the renderListItem function\n// -> May also be better to create a function to render a single todo rather than re-render all of them\n\n// ------------------------------------------------------------------------------\n//                                 DOM NODES\n\n//-------------------------------------------------------------------------------\nconst todos = document.querySelectorAll(\n  '.todo-list-item'\n) as NodeListOf<HTMLLIElement>;\nconst form = document.querySelector('.create-bar-form') as HTMLFormElement;\nconst input = document.querySelector('.create-bar') as HTMLInputElement;\nconst ul = document.querySelector('.list') as HTMLUListElement;\nconst template = document.querySelector(\n  '#example-list-item'\n) as HTMLTemplateElement;\n\n// ------------------------------------------------------------------------------\n//                                 TYPES\n//-------------------------------------------------------------------------------\ntype Todo = {\n  id: string;\n  value: string;\n  completed: boolean;\n};\n\ntype validButton = 'delete-btn' | 'complete-btn' | 'not-a-button';\n\ntype allowedElements = 'p' | 'ins' | 'del';\n\n// ------------------------------------------------------------------------------\n//                                 MODEL\n//-------------------------------------------------------------------------------\ntype Model = {\n  AllTodos: Todo[];\n};\n\n// ------------------------------------------------------------------------------\n//                               GLOBAL STATE\n//-------------------------------------------------------------------------------\nconst init: Model = {\n  AllTodos: [],\n};\nObject.freeze(init);\n\n// ------------------------------------------------------------------------------\n//                             UPDATE FUNCTION\n//-------------------------------------------------------------------------------\ntype Msg = 'AddTodo' | 'RemoveTodo' | 'UpdateTodo' | 'CompleteTodo';\n\nfunction update(msg: Msg, model: Model, value: Todo): void {\n  switch (msg) {\n    case 'AddTodo':\n      model.AllTodos.push(value);\n      break;\n\n    case 'RemoveTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos.splice(index, 1);\n        }\n      });\n      break;\n\n    case 'UpdateTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].value = value.value;\n        }\n      });\n      break;\n\n    case 'CompleteTodo':\n      model.AllTodos.forEach((todo) => {\n        if (todo.id === value.id) {\n          const index = model.AllTodos.indexOf(todo);\n          model.AllTodos[index].completed = !value.completed;\n        }\n      });\n      break;\n  }\n}\n\n// ------------------------------------------------------------------------------\n//                                   SCRIPTS\n//-------------------------------------------------------------------------------\n\n// GET TODOS FROM LOCAL STORAGE AND DISPLAY THEM\n((model: Model) => {\n  const getStoredTodos: string = getItemsFromLocalStorage('todos');\n  const parseStoredTodos: Todo[] = parseTodos(getStoredTodos);\n\n  // if there're no previous todo's, create example todo\n  if (parseStoredTodos.length === 0) {\n    const newTodo = renderListItemNode(template);\n    update('AddTodo', model, newTodo);\n  } else {\n    for (const todo of parseStoredTodos) {\n      update('AddTodo', model, todo);\n    }\n  }\n\n  renderTodos(model.AllTodos);\n\n  // add event listener to initial todo so that it can be set to complete as well\n  const allTodos = document.querySelectorAll('.complete-btn');\n  allTodos.forEach((todo) => {\n    todo.addEventListener('click', (e) => {\n      // handleCompletedClick(e, model);\n      saveToLocalStorage(model.AllTodos);\n    });\n  });\n})(init);\n\n// CREATE NEW TODOS\n((model: Model) => {\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const getUserInput = input.value.trim();\n    const isUserInputEmpty = CheckIfEmptyString(getUserInput);\n    const createNewTodo = createTodoObject(getUserInput);\n\n    if (!isUserInputEmpty) {\n      update('AddTodo', model, createNewTodo);\n      saveToLocalStorage(model.AllTodos);\n    }\n\n    renderTodos(model.AllTodos);\n  });\n})(init);\n\n// DELETE TODOS\n((model: Model) => {\n  ul.addEventListener('click', (e) => {\n    const xImage = e.target as HTMLImageElement;\n    const button = xImage.parentElement as HTMLButtonElement;\n\n    const li = button.parentElement as HTMLLIElement;\n\n    const todoId = li.dataset.id as string;\n    const isDeleteOrUpdateBtn = checkTypeOfButton(button);\n\n    if (isDeleteOrUpdateBtn === 'delete-btn') {\n      const todoThatShouldBeDeleted = findTodo(todoId, model);\n      deleteTodo(todoThatShouldBeDeleted.id, model, li);\n      update('RemoveTodo', model, todoThatShouldBeDeleted);\n      saveToLocalStorage(model.AllTodos);\n    }\n  });\n})(init);\n\n// UPDATE TODOS\n((model: Model) => {\n  ul.addEventListener('focusout', (e) => {\n    const target = e.target;\n\n    if (target instanceof HTMLParagraphElement) {\n      const text = target.textContent !== null ? target.textContent : '';\n      const listItem = target.parentElement as HTMLLIElement;\n      const listItemID = listItem.dataset.id;\n\n      if (listItemID !== undefined) {\n        const updatedTodo: Todo = {\n          id: listItemID,\n          value: text,\n          completed: false,\n        };\n\n        const newChild = document.createElement('del');\n        newChild.className = 'list-item-text';\n        newChild.textContent = text;\n        const oldChild = target;\n        const parent = listItem;\n\n        const replacementInfo = { parent, newChild, oldChild };\n        // console.log(replacementInfo);\n\n        update('UpdateTodo', model, updatedTodo);\n        // handleCompletedClick(e, model, replacementInfo);\n        saveToLocalStorage(model.AllTodos);\n      } else {\n        throw new Error(\"This list item doesn't have an ID\");\n      }\n    }\n  });\n})(init);\n\n// COMPLETE TODO\n((model: Model) => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true };\n\n  // Callback function to execute when mutations are observed\n  const callback = (mutationList) => {\n    for (const mutation of mutationList) {\n      if (mutation.type === 'childList') {\n        if (mutation.addedNodes.length !== 0) {\n          const allCompleteButtons = document.querySelectorAll('.complete-btn');\n\n          allCompleteButtons.forEach((button) => {\n            button.removeEventListener('click', () => {});\n\n            button.addEventListener('click', () => {\n              const listItem = button.parentElement as HTMLLIElement;\n              const pOrDel = listItem.children[1] as HTMLParagraphElement;\n              const todoText = pOrDel.textContent;\n\n              const del = document.createElement('del');\n              del.textContent = todoText;\n              del.className = 'list-item-text';\n\n              const p = document.createElement('p');\n              p.textContent = todoText;\n              p.className = 'list-item-text';\n              p.setAttribute('contenteditable', 'true');\n\n              if (pOrDel instanceof HTMLParagraphElement) {\n                listItem.replaceChild(del, pOrDel);\n              } else {\n                listItem.replaceChild(p, pOrDel);\n              }\n\n              if (listItem.dataset.id != null) {\n                const currentTodo = findTodo(listItem.dataset.id, model);\n                const opposite = !currentTodo.completed;\n                listItem.dataset.completed = String(opposite);\n\n                update('CompleteTodo', model, currentTodo);\n                saveToLocalStorage(model.AllTodos);\n              }\n            });\n          });\n        }\n      }\n    }\n  };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver(callback);\n\n  // Start observing the target node for configured mutations\n  observer.observe(ul, config);\n\n  // add a mutation so that the mutationObserver will automatically kick in\n  const newLi = document.createElement('li') as HTMLLIElement;\n  newLi.dataset.id = '000';\n  const shouldDelete = newLi;\n  ul.append(newLi);\n  if (shouldDelete.dataset.id === '000') {\n    shouldDelete.remove();\n  }\n})(init);\n\n// SET FILTER\n((model: Model) => {})(init);\n\n// ------------------------------------------------------------------------------\n//                              VIEW FUNCTIONS\n//-------------------------------------------------------------------------------\n\n/**\n * Displays all the todos from the global state unto the page\n * @param todos - The global state\n */\nfunction renderTodos(todos: Todo[]) {\n  ul.innerHTML = '';\n\n  let tempStorage: string[] = [];\n  for (const todo of todos) {\n    const determineElement = todo.completed ? 'del' : 'p';\n\n    tempStorage.push(\n      createListItem(\n        todo.id,\n        todo.value.trim(),\n        todo.completed,\n        determineElement\n      )\n    );\n    input.value = '';\n  }\n  ul.innerHTML = tempStorage.join('');\n}\n\n/**\n * Mutates a todo so that its completed data attribute is toggled\n * @param listItem - A list item currently appended to the DOM\n * @param value - What the completed data attribute should be set to\n */\nfunction toggleCompleteAttribute(listItem: HTMLLIElement, value: boolean) {\n  const isCompleted = value;\n\n  listItem.dataset.completed = isCompleted.toString();\n}\n\n/**\n * Removes a Todo <li> from the DOM\n * @param id - A unique id belonging to an object of type Todo\n * @param model - The global state\n * @param listElement - A list element to be removed\n * @returns {Todo} The deleted Todo object\n */\nfunction deleteTodo(\n  id: string,\n  model: Model,\n  listElement: HTMLLIElement\n): Todo {\n  const todo = findTodo(id, model);\n  listElement.remove();\n\n  return todo;\n}\n\n/**\n * Updates the global state, toggles the completed data attribute on a list item and replaces the p element with a del element if needed\n * @param e - A click event\n * @param model - The global state\n * @param el -\n */\nfunction handleCompletedClick(e: Event, model: Model, el = {}) {\n  const completeBtn = e.currentTarget as HTMLButtonElement;\n\n  const listItem = completeBtn.parentElement as HTMLLIElement;\n  const id = listItem.dataset.id;\n\n  if (id !== undefined) {\n    const currentTodo = findTodo(id, model);\n    currentTodo.completed = !currentTodo.completed;\n\n    // const determineElement = currentTodo.completed ? 'del' : 'p';\n\n    // const completedTodo = createListItem(\n    //   id,\n    //   currentTodo.value,\n    //   currentTodo.completed,\n    //   determineElement\n    // );\n\n    update('CompleteTodo', model, currentTodo);\n\n    toggleCompleteAttribute(listItem, currentTodo.completed);\n  }\n}\n\n// ------------------------------------------------------------------------------\n//                              HELPER FUNCTIONS\n//-------------------------------------------------------------------------------\n/**\n * Creates a list item\n * @param id - The unique ID of the list item todo\n * @param text - The actual todo itself\n * @param el - Represents an Html element, ins and del are semantically correct but a p tag can be used as well\n * @param completed - Reflects whether the complete button has been clicked or not\n * @returns {string} The inner HTML of the <li> including the li itself\n */\nfunction createListItem(\n  id: string,\n  text: string,\n  completed: boolean = false,\n  el: allowedElements = 'p'\n): string {\n  const listItem = `\n        <li class=\"list-item\" data-id=${id} data-completed=\"${completed}\">\n          <button class=\"complete-btn\">\n            <img src=\"/src/assets/images/icon-check.svg\" aria-hidden=\"true\" alt=\"\" />\n          </button>\n          <${el} class=\"list-item-text\" contenteditable=\"true\">${text}</${el}>\n          <button class=\"delete-btn todo-delete-icon\">\n            <img class=\"d\" src=\"/src/assets/images/icon-cross.svg\" alt=\"\" />\n          </button>\n        </li>\n    `;\n\n  return listItem;\n}\n\n/**\n * Checks if a string is empty. Will trim the the middle of the string\n * @param str - A string that will be checked\n * @returns {boolean} True if string is empty, false otherwise\n */\nfunction CheckIfEmptyString(str: string): boolean {\n  return str.trim() === '';\n}\n\n/**\n * Generates a unique id\n * @returns {string} A unique ID\n */\nfunction generateId(): string {\n  return Math.random().toString(36).slice(2);\n}\n\n/**\n * Creates an object of type Todo\n * @param value - A string which should be the actual todo itself\n * @returns {Todo} A todo object\n */\nfunction createTodoObject(value: string): Todo {\n  return {\n    id: generateId(),\n    value: value,\n    completed: false,\n  };\n}\n\n/**\n * Checks for the type of button being passed in\n * @param element - The button that was clicked on\n * @returns {validButton} A message stating the type of button that was clicked on\n * @throws {new Error} A string error built with the Error constructor\n * @example checkTypeOfButton(deleteBtn) -> 'delete-btn'\n */\nfunction checkTypeOfButton(element: HTMLButtonElement): validButton {\n  if (element.classList.contains('todo-delete-icon')) {\n    return 'delete-btn';\n  } else if (element.classList.contains('complete-btn')) {\n    return 'complete-btn';\n  } else {\n    return 'not-a-button';\n  }\n}\n\n/**\n * Finds a specific Todo based on an ID\n * @param id - A unique ID belonging to an object of type Todo\n * @param model - The global state\n * @returns {Todo} The Todo which matches the id passed in\n */\nfunction findTodo(id: string, model: Model): Todo {\n  const matchingTodo = model.AllTodos.filter((todo) => todo.id === id);\n\n  return matchingTodo[0];\n}\n\n/**\n * Saves users todos to local storage\n * @param todos - The global state that should be saved to local storage\n */\nfunction saveToLocalStorage(todos: Todo[]) {\n  const todoToJson = JSON.stringify(todos);\n  localStorage.setItem('todos', todoToJson);\n}\n\n/**\n * Retrieves a JSON string from localStorage\n * @param itemName - The key in the key:value pair of localStorage\n * @returns {string} Either a string of the users todos or an empty array\n */\nfunction getItemsFromLocalStorage(itemName: string): string {\n  const storage = localStorage.getItem(itemName);\n  return storage !== null ? storage : '[]';\n}\n\n/**\n * Parses the users todo's\n * @param item - Parses a string\n * @returns {Todo[]} An array of objects of type Todo\n */\nfunction parseTodos(item: string): Todo[] {\n  return JSON.parse(item);\n}\n\n/**\n * Simply for taking out the bloat from the script itself\n * @returns The example Todo\n */\nfunction renderListItemNode(template: HTMLTemplateElement): Todo {\n  const docFragment: DocumentFragment = template.content;\n  const listItemClone = docFragment.firstElementChild?.cloneNode(\n    true\n  ) as HTMLLIElement;\n\n  const id = listItemClone.dataset.id as string;\n  const pEl = listItemClone.childNodes[3];\n  const text = pEl.textContent?.trim() as string;\n\n  const newTodo: Todo = {\n    id: id,\n    value: text,\n    completed: false,\n  };\n\n  return newTodo;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}